// Code generated by protoc-gen-go.
// source: openrtb.proto
// DO NOT EDIT!

/*
Package zadx is a generated protocol buffer package.

It is generated from these files:
	openrtb.proto

It has these top-level messages:
	BidRequest
	BidResponse
	NativeRequest
	NativeResponse
*/
package zadx

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OpenRTB 5.1: The following list represents the IAB's contextual taxonomy for
// categorization. Standard IDs have been adopted to easily support the
// communication of primary and secondary categories for various objects.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentCategory int32

const (
	ContentCategory_IAB1     ContentCategory = 1
	ContentCategory_IAB1_1   ContentCategory = 2
	ContentCategory_IAB1_2   ContentCategory = 3
	ContentCategory_IAB1_3   ContentCategory = 4
	ContentCategory_IAB1_4   ContentCategory = 5
	ContentCategory_IAB1_5   ContentCategory = 6
	ContentCategory_IAB1_6   ContentCategory = 7
	ContentCategory_IAB1_7   ContentCategory = 8
	ContentCategory_IAB2     ContentCategory = 9
	ContentCategory_IAB2_1   ContentCategory = 10
	ContentCategory_IAB2_2   ContentCategory = 11
	ContentCategory_IAB2_3   ContentCategory = 12
	ContentCategory_IAB2_4   ContentCategory = 13
	ContentCategory_IAB2_5   ContentCategory = 14
	ContentCategory_IAB2_6   ContentCategory = 15
	ContentCategory_IAB2_7   ContentCategory = 16
	ContentCategory_IAB2_8   ContentCategory = 17
	ContentCategory_IAB2_9   ContentCategory = 18
	ContentCategory_IAB2_10  ContentCategory = 19
	ContentCategory_IAB2_11  ContentCategory = 20
	ContentCategory_IAB2_12  ContentCategory = 21
	ContentCategory_IAB2_13  ContentCategory = 22
	ContentCategory_IAB2_14  ContentCategory = 23
	ContentCategory_IAB2_15  ContentCategory = 24
	ContentCategory_IAB2_16  ContentCategory = 25
	ContentCategory_IAB2_17  ContentCategory = 26
	ContentCategory_IAB2_18  ContentCategory = 27
	ContentCategory_IAB2_19  ContentCategory = 28
	ContentCategory_IAB2_20  ContentCategory = 29
	ContentCategory_IAB2_21  ContentCategory = 30
	ContentCategory_IAB2_22  ContentCategory = 31
	ContentCategory_IAB2_23  ContentCategory = 32
	ContentCategory_IAB3     ContentCategory = 33
	ContentCategory_IAB3_1   ContentCategory = 34
	ContentCategory_IAB3_2   ContentCategory = 35
	ContentCategory_IAB3_3   ContentCategory = 36
	ContentCategory_IAB3_4   ContentCategory = 37
	ContentCategory_IAB3_5   ContentCategory = 38
	ContentCategory_IAB3_6   ContentCategory = 39
	ContentCategory_IAB3_7   ContentCategory = 40
	ContentCategory_IAB3_8   ContentCategory = 41
	ContentCategory_IAB3_9   ContentCategory = 42
	ContentCategory_IAB3_10  ContentCategory = 43
	ContentCategory_IAB3_11  ContentCategory = 44
	ContentCategory_IAB3_12  ContentCategory = 45
	ContentCategory_IAB4     ContentCategory = 46
	ContentCategory_IAB4_1   ContentCategory = 47
	ContentCategory_IAB4_2   ContentCategory = 48
	ContentCategory_IAB4_3   ContentCategory = 49
	ContentCategory_IAB4_4   ContentCategory = 50
	ContentCategory_IAB4_5   ContentCategory = 51
	ContentCategory_IAB4_6   ContentCategory = 52
	ContentCategory_IAB4_7   ContentCategory = 53
	ContentCategory_IAB4_8   ContentCategory = 54
	ContentCategory_IAB4_9   ContentCategory = 55
	ContentCategory_IAB4_10  ContentCategory = 56
	ContentCategory_IAB4_11  ContentCategory = 57
	ContentCategory_IAB5     ContentCategory = 58
	ContentCategory_IAB5_1   ContentCategory = 59
	ContentCategory_IAB5_2   ContentCategory = 60
	ContentCategory_IAB5_3   ContentCategory = 61
	ContentCategory_IAB5_4   ContentCategory = 62
	ContentCategory_IAB5_5   ContentCategory = 63
	ContentCategory_IAB5_6   ContentCategory = 64
	ContentCategory_IAB5_7   ContentCategory = 65
	ContentCategory_IAB5_8   ContentCategory = 66
	ContentCategory_IAB5_9   ContentCategory = 67
	ContentCategory_IAB5_10  ContentCategory = 68
	ContentCategory_IAB5_11  ContentCategory = 69
	ContentCategory_IAB5_12  ContentCategory = 70
	ContentCategory_IAB5_13  ContentCategory = 71
	ContentCategory_IAB5_14  ContentCategory = 72
	ContentCategory_IAB5_15  ContentCategory = 73
	ContentCategory_IAB6     ContentCategory = 74
	ContentCategory_IAB6_1   ContentCategory = 75
	ContentCategory_IAB6_2   ContentCategory = 76
	ContentCategory_IAB6_3   ContentCategory = 77
	ContentCategory_IAB6_4   ContentCategory = 78
	ContentCategory_IAB6_5   ContentCategory = 79
	ContentCategory_IAB6_6   ContentCategory = 80
	ContentCategory_IAB6_7   ContentCategory = 81
	ContentCategory_IAB6_8   ContentCategory = 82
	ContentCategory_IAB6_9   ContentCategory = 83
	ContentCategory_IAB7     ContentCategory = 84
	ContentCategory_IAB7_1   ContentCategory = 85
	ContentCategory_IAB7_2   ContentCategory = 86
	ContentCategory_IAB7_3   ContentCategory = 87
	ContentCategory_IAB7_4   ContentCategory = 88
	ContentCategory_IAB7_5   ContentCategory = 89
	ContentCategory_IAB7_6   ContentCategory = 90
	ContentCategory_IAB7_7   ContentCategory = 91
	ContentCategory_IAB7_8   ContentCategory = 92
	ContentCategory_IAB7_9   ContentCategory = 93
	ContentCategory_IAB7_10  ContentCategory = 94
	ContentCategory_IAB7_11  ContentCategory = 95
	ContentCategory_IAB7_12  ContentCategory = 96
	ContentCategory_IAB7_13  ContentCategory = 97
	ContentCategory_IAB7_14  ContentCategory = 98
	ContentCategory_IAB7_15  ContentCategory = 99
	ContentCategory_IAB7_16  ContentCategory = 100
	ContentCategory_IAB7_17  ContentCategory = 101
	ContentCategory_IAB7_18  ContentCategory = 102
	ContentCategory_IAB7_19  ContentCategory = 103
	ContentCategory_IAB7_20  ContentCategory = 104
	ContentCategory_IAB7_21  ContentCategory = 105
	ContentCategory_IAB7_22  ContentCategory = 106
	ContentCategory_IAB7_23  ContentCategory = 107
	ContentCategory_IAB7_24  ContentCategory = 108
	ContentCategory_IAB7_25  ContentCategory = 109
	ContentCategory_IAB7_26  ContentCategory = 110
	ContentCategory_IAB7_27  ContentCategory = 111
	ContentCategory_IAB7_28  ContentCategory = 112
	ContentCategory_IAB7_29  ContentCategory = 113
	ContentCategory_IAB7_30  ContentCategory = 114
	ContentCategory_IAB7_31  ContentCategory = 115
	ContentCategory_IAB7_32  ContentCategory = 116
	ContentCategory_IAB7_33  ContentCategory = 117
	ContentCategory_IAB7_34  ContentCategory = 118
	ContentCategory_IAB7_35  ContentCategory = 119
	ContentCategory_IAB7_36  ContentCategory = 120
	ContentCategory_IAB7_37  ContentCategory = 121
	ContentCategory_IAB7_38  ContentCategory = 122
	ContentCategory_IAB7_39  ContentCategory = 123
	ContentCategory_IAB7_40  ContentCategory = 124
	ContentCategory_IAB7_41  ContentCategory = 125
	ContentCategory_IAB7_42  ContentCategory = 126
	ContentCategory_IAB7_43  ContentCategory = 127
	ContentCategory_IAB7_44  ContentCategory = 128
	ContentCategory_IAB7_45  ContentCategory = 129
	ContentCategory_IAB8     ContentCategory = 130
	ContentCategory_IAB8_1   ContentCategory = 131
	ContentCategory_IAB8_2   ContentCategory = 132
	ContentCategory_IAB8_3   ContentCategory = 133
	ContentCategory_IAB8_4   ContentCategory = 134
	ContentCategory_IAB8_5   ContentCategory = 135
	ContentCategory_IAB8_6   ContentCategory = 136
	ContentCategory_IAB8_7   ContentCategory = 137
	ContentCategory_IAB8_8   ContentCategory = 138
	ContentCategory_IAB8_9   ContentCategory = 139
	ContentCategory_IAB8_10  ContentCategory = 140
	ContentCategory_IAB8_11  ContentCategory = 141
	ContentCategory_IAB8_12  ContentCategory = 142
	ContentCategory_IAB8_13  ContentCategory = 143
	ContentCategory_IAB8_14  ContentCategory = 144
	ContentCategory_IAB8_15  ContentCategory = 145
	ContentCategory_IAB8_16  ContentCategory = 146
	ContentCategory_IAB8_17  ContentCategory = 147
	ContentCategory_IAB8_18  ContentCategory = 148
	ContentCategory_IAB9     ContentCategory = 149
	ContentCategory_IAB9_1   ContentCategory = 150
	ContentCategory_IAB9_2   ContentCategory = 151
	ContentCategory_IAB9_3   ContentCategory = 152
	ContentCategory_IAB9_4   ContentCategory = 153
	ContentCategory_IAB9_5   ContentCategory = 154
	ContentCategory_IAB9_6   ContentCategory = 155
	ContentCategory_IAB9_7   ContentCategory = 156
	ContentCategory_IAB9_8   ContentCategory = 157
	ContentCategory_IAB9_9   ContentCategory = 158
	ContentCategory_IAB9_10  ContentCategory = 159
	ContentCategory_IAB9_11  ContentCategory = 160
	ContentCategory_IAB9_12  ContentCategory = 161
	ContentCategory_IAB9_13  ContentCategory = 162
	ContentCategory_IAB9_14  ContentCategory = 163
	ContentCategory_IAB9_15  ContentCategory = 164
	ContentCategory_IAB9_16  ContentCategory = 165
	ContentCategory_IAB9_17  ContentCategory = 166
	ContentCategory_IAB9_18  ContentCategory = 167
	ContentCategory_IAB9_19  ContentCategory = 168
	ContentCategory_IAB9_20  ContentCategory = 169
	ContentCategory_IAB9_21  ContentCategory = 170
	ContentCategory_IAB9_22  ContentCategory = 171
	ContentCategory_IAB9_23  ContentCategory = 172
	ContentCategory_IAB9_24  ContentCategory = 173
	ContentCategory_IAB9_25  ContentCategory = 174
	ContentCategory_IAB9_26  ContentCategory = 175
	ContentCategory_IAB9_27  ContentCategory = 176
	ContentCategory_IAB9_28  ContentCategory = 177
	ContentCategory_IAB9_29  ContentCategory = 178
	ContentCategory_IAB9_30  ContentCategory = 179
	ContentCategory_IAB9_31  ContentCategory = 180
	ContentCategory_IAB10    ContentCategory = 181
	ContentCategory_IAB10_1  ContentCategory = 182
	ContentCategory_IAB10_2  ContentCategory = 183
	ContentCategory_IAB10_3  ContentCategory = 184
	ContentCategory_IAB10_4  ContentCategory = 185
	ContentCategory_IAB10_5  ContentCategory = 186
	ContentCategory_IAB10_6  ContentCategory = 187
	ContentCategory_IAB10_7  ContentCategory = 188
	ContentCategory_IAB10_8  ContentCategory = 189
	ContentCategory_IAB10_9  ContentCategory = 190
	ContentCategory_IAB11    ContentCategory = 191
	ContentCategory_IAB11_1  ContentCategory = 192
	ContentCategory_IAB11_2  ContentCategory = 193
	ContentCategory_IAB11_3  ContentCategory = 194
	ContentCategory_IAB11_4  ContentCategory = 195
	ContentCategory_IAB11_5  ContentCategory = 196
	ContentCategory_IAB12    ContentCategory = 197
	ContentCategory_IAB12_1  ContentCategory = 198
	ContentCategory_IAB12_2  ContentCategory = 199
	ContentCategory_IAB12_3  ContentCategory = 200
	ContentCategory_IAB13    ContentCategory = 201
	ContentCategory_IAB13_1  ContentCategory = 202
	ContentCategory_IAB13_2  ContentCategory = 203
	ContentCategory_IAB13_3  ContentCategory = 204
	ContentCategory_IAB13_4  ContentCategory = 205
	ContentCategory_IAB13_5  ContentCategory = 206
	ContentCategory_IAB13_6  ContentCategory = 207
	ContentCategory_IAB13_7  ContentCategory = 208
	ContentCategory_IAB13_8  ContentCategory = 209
	ContentCategory_IAB13_9  ContentCategory = 210
	ContentCategory_IAB13_10 ContentCategory = 211
	ContentCategory_IAB13_11 ContentCategory = 212
	ContentCategory_IAB13_12 ContentCategory = 213
	ContentCategory_IAB14    ContentCategory = 214
	ContentCategory_IAB14_1  ContentCategory = 215
	ContentCategory_IAB14_2  ContentCategory = 216
	ContentCategory_IAB14_3  ContentCategory = 217
	ContentCategory_IAB14_4  ContentCategory = 218
	ContentCategory_IAB14_5  ContentCategory = 219
	ContentCategory_IAB14_6  ContentCategory = 220
	ContentCategory_IAB14_7  ContentCategory = 221
	ContentCategory_IAB14_8  ContentCategory = 222
	ContentCategory_IAB15    ContentCategory = 223
	ContentCategory_IAB15_1  ContentCategory = 224
	ContentCategory_IAB15_2  ContentCategory = 225
	ContentCategory_IAB15_3  ContentCategory = 226
	ContentCategory_IAB15_4  ContentCategory = 227
	ContentCategory_IAB15_5  ContentCategory = 228
	ContentCategory_IAB15_6  ContentCategory = 229
	ContentCategory_IAB15_7  ContentCategory = 230
	ContentCategory_IAB15_8  ContentCategory = 231
	ContentCategory_IAB15_9  ContentCategory = 232
	ContentCategory_IAB15_10 ContentCategory = 233
	ContentCategory_IAB16    ContentCategory = 234
	ContentCategory_IAB16_1  ContentCategory = 235
	ContentCategory_IAB16_2  ContentCategory = 236
	ContentCategory_IAB16_3  ContentCategory = 237
	ContentCategory_IAB16_4  ContentCategory = 238
	ContentCategory_IAB16_5  ContentCategory = 239
	ContentCategory_IAB16_6  ContentCategory = 240
	ContentCategory_IAB16_7  ContentCategory = 241
	ContentCategory_IAB17    ContentCategory = 242
	ContentCategory_IAB17_1  ContentCategory = 243
	ContentCategory_IAB17_2  ContentCategory = 244
	ContentCategory_IAB17_3  ContentCategory = 245
	ContentCategory_IAB17_4  ContentCategory = 246
	ContentCategory_IAB17_5  ContentCategory = 247
	ContentCategory_IAB17_6  ContentCategory = 248
	ContentCategory_IAB17_7  ContentCategory = 249
	ContentCategory_IAB17_8  ContentCategory = 250
	ContentCategory_IAB17_9  ContentCategory = 251
	ContentCategory_IAB17_10 ContentCategory = 252
	ContentCategory_IAB17_11 ContentCategory = 253
	ContentCategory_IAB17_12 ContentCategory = 254
	ContentCategory_IAB17_13 ContentCategory = 255
	ContentCategory_IAB17_14 ContentCategory = 256
	ContentCategory_IAB17_15 ContentCategory = 257
	ContentCategory_IAB17_16 ContentCategory = 258
	ContentCategory_IAB17_17 ContentCategory = 259
	ContentCategory_IAB17_18 ContentCategory = 260
	ContentCategory_IAB17_19 ContentCategory = 261
	ContentCategory_IAB17_20 ContentCategory = 262
	ContentCategory_IAB17_21 ContentCategory = 263
	ContentCategory_IAB17_22 ContentCategory = 264
	ContentCategory_IAB17_23 ContentCategory = 265
	ContentCategory_IAB17_24 ContentCategory = 266
	ContentCategory_IAB17_25 ContentCategory = 267
	ContentCategory_IAB17_26 ContentCategory = 268
	ContentCategory_IAB17_27 ContentCategory = 269
	ContentCategory_IAB17_28 ContentCategory = 270
	ContentCategory_IAB17_29 ContentCategory = 271
	ContentCategory_IAB17_30 ContentCategory = 272
	ContentCategory_IAB17_31 ContentCategory = 273
	ContentCategory_IAB17_32 ContentCategory = 274
	ContentCategory_IAB17_33 ContentCategory = 275
	ContentCategory_IAB17_34 ContentCategory = 276
	ContentCategory_IAB17_35 ContentCategory = 277
	ContentCategory_IAB17_36 ContentCategory = 278
	ContentCategory_IAB17_37 ContentCategory = 279
	ContentCategory_IAB17_38 ContentCategory = 280
	ContentCategory_IAB17_39 ContentCategory = 281
	ContentCategory_IAB17_40 ContentCategory = 282
	ContentCategory_IAB17_41 ContentCategory = 283
	ContentCategory_IAB17_42 ContentCategory = 284
	ContentCategory_IAB17_43 ContentCategory = 285
	ContentCategory_IAB17_44 ContentCategory = 286
	ContentCategory_IAB18    ContentCategory = 287
	ContentCategory_IAB18_1  ContentCategory = 288
	ContentCategory_IAB18_2  ContentCategory = 289
	ContentCategory_IAB18_3  ContentCategory = 290
	ContentCategory_IAB18_4  ContentCategory = 291
	ContentCategory_IAB18_5  ContentCategory = 292
	ContentCategory_IAB18_6  ContentCategory = 293
	ContentCategory_IAB19    ContentCategory = 294
	ContentCategory_IAB19_1  ContentCategory = 295
	ContentCategory_IAB19_2  ContentCategory = 296
	ContentCategory_IAB19_3  ContentCategory = 297
	ContentCategory_IAB19_4  ContentCategory = 298
	ContentCategory_IAB19_5  ContentCategory = 299
	ContentCategory_IAB19_6  ContentCategory = 300
	ContentCategory_IAB19_7  ContentCategory = 301
	ContentCategory_IAB19_8  ContentCategory = 302
	ContentCategory_IAB19_9  ContentCategory = 303
	ContentCategory_IAB19_10 ContentCategory = 304
	ContentCategory_IAB19_11 ContentCategory = 305
	ContentCategory_IAB19_12 ContentCategory = 306
	ContentCategory_IAB19_13 ContentCategory = 307
	ContentCategory_IAB19_14 ContentCategory = 308
	ContentCategory_IAB19_15 ContentCategory = 309
	ContentCategory_IAB19_16 ContentCategory = 310
	ContentCategory_IAB19_17 ContentCategory = 311
	ContentCategory_IAB19_18 ContentCategory = 312
	ContentCategory_IAB19_19 ContentCategory = 313
	ContentCategory_IAB19_20 ContentCategory = 314
	ContentCategory_IAB19_21 ContentCategory = 315
	ContentCategory_IAB19_22 ContentCategory = 316
	ContentCategory_IAB19_23 ContentCategory = 317
	ContentCategory_IAB19_24 ContentCategory = 318
	ContentCategory_IAB19_25 ContentCategory = 319
	ContentCategory_IAB19_26 ContentCategory = 320
	ContentCategory_IAB19_27 ContentCategory = 321
	ContentCategory_IAB19_28 ContentCategory = 322
	ContentCategory_IAB19_29 ContentCategory = 323
	ContentCategory_IAB19_30 ContentCategory = 324
	ContentCategory_IAB19_31 ContentCategory = 325
	ContentCategory_IAB19_32 ContentCategory = 326
	ContentCategory_IAB19_33 ContentCategory = 327
	ContentCategory_IAB19_34 ContentCategory = 328
	ContentCategory_IAB19_35 ContentCategory = 329
	ContentCategory_IAB19_36 ContentCategory = 330
	ContentCategory_IAB20    ContentCategory = 331
	ContentCategory_IAB20_1  ContentCategory = 332
	ContentCategory_IAB20_2  ContentCategory = 333
	ContentCategory_IAB20_3  ContentCategory = 334
	ContentCategory_IAB20_4  ContentCategory = 335
	ContentCategory_IAB20_5  ContentCategory = 336
	ContentCategory_IAB20_6  ContentCategory = 337
	ContentCategory_IAB20_7  ContentCategory = 338
	ContentCategory_IAB20_8  ContentCategory = 339
	ContentCategory_IAB20_9  ContentCategory = 340
	ContentCategory_IAB20_10 ContentCategory = 341
	ContentCategory_IAB20_11 ContentCategory = 342
	ContentCategory_IAB20_12 ContentCategory = 343
	ContentCategory_IAB20_13 ContentCategory = 344
	ContentCategory_IAB20_14 ContentCategory = 345
	ContentCategory_IAB20_15 ContentCategory = 346
	ContentCategory_IAB20_16 ContentCategory = 347
	ContentCategory_IAB20_17 ContentCategory = 348
	ContentCategory_IAB20_18 ContentCategory = 349
	ContentCategory_IAB20_19 ContentCategory = 350
	ContentCategory_IAB20_20 ContentCategory = 351
	ContentCategory_IAB20_21 ContentCategory = 352
	ContentCategory_IAB20_22 ContentCategory = 353
	ContentCategory_IAB20_23 ContentCategory = 354
	ContentCategory_IAB20_24 ContentCategory = 355
	ContentCategory_IAB20_25 ContentCategory = 356
	ContentCategory_IAB20_26 ContentCategory = 357
	ContentCategory_IAB20_27 ContentCategory = 358
	ContentCategory_IAB21    ContentCategory = 359
	ContentCategory_IAB21_1  ContentCategory = 360
	ContentCategory_IAB21_2  ContentCategory = 361
	ContentCategory_IAB21_3  ContentCategory = 362
	ContentCategory_IAB22    ContentCategory = 363
	ContentCategory_IAB22_1  ContentCategory = 364
	ContentCategory_IAB22_2  ContentCategory = 365
	ContentCategory_IAB22_3  ContentCategory = 366
	ContentCategory_IAB22_4  ContentCategory = 367
	ContentCategory_IAB23    ContentCategory = 368
	ContentCategory_IAB23_1  ContentCategory = 369
	ContentCategory_IAB23_2  ContentCategory = 370
	ContentCategory_IAB23_3  ContentCategory = 371
	ContentCategory_IAB23_4  ContentCategory = 372
	ContentCategory_IAB23_5  ContentCategory = 373
	ContentCategory_IAB23_6  ContentCategory = 374
	ContentCategory_IAB23_7  ContentCategory = 375
	ContentCategory_IAB23_8  ContentCategory = 376
	ContentCategory_IAB23_9  ContentCategory = 377
	ContentCategory_IAB23_10 ContentCategory = 378
	ContentCategory_IAB24    ContentCategory = 379
	ContentCategory_IAB25    ContentCategory = 380
	ContentCategory_IAB25_1  ContentCategory = 381
	ContentCategory_IAB25_2  ContentCategory = 382
	ContentCategory_IAB25_3  ContentCategory = 383
	ContentCategory_IAB25_4  ContentCategory = 384
	ContentCategory_IAB25_5  ContentCategory = 385
	ContentCategory_IAB25_6  ContentCategory = 386
	ContentCategory_IAB25_7  ContentCategory = 387
	ContentCategory_IAB26    ContentCategory = 388
	ContentCategory_IAB26_1  ContentCategory = 389
	ContentCategory_IAB26_2  ContentCategory = 390
	ContentCategory_IAB26_3  ContentCategory = 391
	ContentCategory_IAB26_4  ContentCategory = 392
)

var ContentCategory_name = map[int32]string{
	1:   "IAB1",
	2:   "IAB1_1",
	3:   "IAB1_2",
	4:   "IAB1_3",
	5:   "IAB1_4",
	6:   "IAB1_5",
	7:   "IAB1_6",
	8:   "IAB1_7",
	9:   "IAB2",
	10:  "IAB2_1",
	11:  "IAB2_2",
	12:  "IAB2_3",
	13:  "IAB2_4",
	14:  "IAB2_5",
	15:  "IAB2_6",
	16:  "IAB2_7",
	17:  "IAB2_8",
	18:  "IAB2_9",
	19:  "IAB2_10",
	20:  "IAB2_11",
	21:  "IAB2_12",
	22:  "IAB2_13",
	23:  "IAB2_14",
	24:  "IAB2_15",
	25:  "IAB2_16",
	26:  "IAB2_17",
	27:  "IAB2_18",
	28:  "IAB2_19",
	29:  "IAB2_20",
	30:  "IAB2_21",
	31:  "IAB2_22",
	32:  "IAB2_23",
	33:  "IAB3",
	34:  "IAB3_1",
	35:  "IAB3_2",
	36:  "IAB3_3",
	37:  "IAB3_4",
	38:  "IAB3_5",
	39:  "IAB3_6",
	40:  "IAB3_7",
	41:  "IAB3_8",
	42:  "IAB3_9",
	43:  "IAB3_10",
	44:  "IAB3_11",
	45:  "IAB3_12",
	46:  "IAB4",
	47:  "IAB4_1",
	48:  "IAB4_2",
	49:  "IAB4_3",
	50:  "IAB4_4",
	51:  "IAB4_5",
	52:  "IAB4_6",
	53:  "IAB4_7",
	54:  "IAB4_8",
	55:  "IAB4_9",
	56:  "IAB4_10",
	57:  "IAB4_11",
	58:  "IAB5",
	59:  "IAB5_1",
	60:  "IAB5_2",
	61:  "IAB5_3",
	62:  "IAB5_4",
	63:  "IAB5_5",
	64:  "IAB5_6",
	65:  "IAB5_7",
	66:  "IAB5_8",
	67:  "IAB5_9",
	68:  "IAB5_10",
	69:  "IAB5_11",
	70:  "IAB5_12",
	71:  "IAB5_13",
	72:  "IAB5_14",
	73:  "IAB5_15",
	74:  "IAB6",
	75:  "IAB6_1",
	76:  "IAB6_2",
	77:  "IAB6_3",
	78:  "IAB6_4",
	79:  "IAB6_5",
	80:  "IAB6_6",
	81:  "IAB6_7",
	82:  "IAB6_8",
	83:  "IAB6_9",
	84:  "IAB7",
	85:  "IAB7_1",
	86:  "IAB7_2",
	87:  "IAB7_3",
	88:  "IAB7_4",
	89:  "IAB7_5",
	90:  "IAB7_6",
	91:  "IAB7_7",
	92:  "IAB7_8",
	93:  "IAB7_9",
	94:  "IAB7_10",
	95:  "IAB7_11",
	96:  "IAB7_12",
	97:  "IAB7_13",
	98:  "IAB7_14",
	99:  "IAB7_15",
	100: "IAB7_16",
	101: "IAB7_17",
	102: "IAB7_18",
	103: "IAB7_19",
	104: "IAB7_20",
	105: "IAB7_21",
	106: "IAB7_22",
	107: "IAB7_23",
	108: "IAB7_24",
	109: "IAB7_25",
	110: "IAB7_26",
	111: "IAB7_27",
	112: "IAB7_28",
	113: "IAB7_29",
	114: "IAB7_30",
	115: "IAB7_31",
	116: "IAB7_32",
	117: "IAB7_33",
	118: "IAB7_34",
	119: "IAB7_35",
	120: "IAB7_36",
	121: "IAB7_37",
	122: "IAB7_38",
	123: "IAB7_39",
	124: "IAB7_40",
	125: "IAB7_41",
	126: "IAB7_42",
	127: "IAB7_43",
	128: "IAB7_44",
	129: "IAB7_45",
	130: "IAB8",
	131: "IAB8_1",
	132: "IAB8_2",
	133: "IAB8_3",
	134: "IAB8_4",
	135: "IAB8_5",
	136: "IAB8_6",
	137: "IAB8_7",
	138: "IAB8_8",
	139: "IAB8_9",
	140: "IAB8_10",
	141: "IAB8_11",
	142: "IAB8_12",
	143: "IAB8_13",
	144: "IAB8_14",
	145: "IAB8_15",
	146: "IAB8_16",
	147: "IAB8_17",
	148: "IAB8_18",
	149: "IAB9",
	150: "IAB9_1",
	151: "IAB9_2",
	152: "IAB9_3",
	153: "IAB9_4",
	154: "IAB9_5",
	155: "IAB9_6",
	156: "IAB9_7",
	157: "IAB9_8",
	158: "IAB9_9",
	159: "IAB9_10",
	160: "IAB9_11",
	161: "IAB9_12",
	162: "IAB9_13",
	163: "IAB9_14",
	164: "IAB9_15",
	165: "IAB9_16",
	166: "IAB9_17",
	167: "IAB9_18",
	168: "IAB9_19",
	169: "IAB9_20",
	170: "IAB9_21",
	171: "IAB9_22",
	172: "IAB9_23",
	173: "IAB9_24",
	174: "IAB9_25",
	175: "IAB9_26",
	176: "IAB9_27",
	177: "IAB9_28",
	178: "IAB9_29",
	179: "IAB9_30",
	180: "IAB9_31",
	181: "IAB10",
	182: "IAB10_1",
	183: "IAB10_2",
	184: "IAB10_3",
	185: "IAB10_4",
	186: "IAB10_5",
	187: "IAB10_6",
	188: "IAB10_7",
	189: "IAB10_8",
	190: "IAB10_9",
	191: "IAB11",
	192: "IAB11_1",
	193: "IAB11_2",
	194: "IAB11_3",
	195: "IAB11_4",
	196: "IAB11_5",
	197: "IAB12",
	198: "IAB12_1",
	199: "IAB12_2",
	200: "IAB12_3",
	201: "IAB13",
	202: "IAB13_1",
	203: "IAB13_2",
	204: "IAB13_3",
	205: "IAB13_4",
	206: "IAB13_5",
	207: "IAB13_6",
	208: "IAB13_7",
	209: "IAB13_8",
	210: "IAB13_9",
	211: "IAB13_10",
	212: "IAB13_11",
	213: "IAB13_12",
	214: "IAB14",
	215: "IAB14_1",
	216: "IAB14_2",
	217: "IAB14_3",
	218: "IAB14_4",
	219: "IAB14_5",
	220: "IAB14_6",
	221: "IAB14_7",
	222: "IAB14_8",
	223: "IAB15",
	224: "IAB15_1",
	225: "IAB15_2",
	226: "IAB15_3",
	227: "IAB15_4",
	228: "IAB15_5",
	229: "IAB15_6",
	230: "IAB15_7",
	231: "IAB15_8",
	232: "IAB15_9",
	233: "IAB15_10",
	234: "IAB16",
	235: "IAB16_1",
	236: "IAB16_2",
	237: "IAB16_3",
	238: "IAB16_4",
	239: "IAB16_5",
	240: "IAB16_6",
	241: "IAB16_7",
	242: "IAB17",
	243: "IAB17_1",
	244: "IAB17_2",
	245: "IAB17_3",
	246: "IAB17_4",
	247: "IAB17_5",
	248: "IAB17_6",
	249: "IAB17_7",
	250: "IAB17_8",
	251: "IAB17_9",
	252: "IAB17_10",
	253: "IAB17_11",
	254: "IAB17_12",
	255: "IAB17_13",
	256: "IAB17_14",
	257: "IAB17_15",
	258: "IAB17_16",
	259: "IAB17_17",
	260: "IAB17_18",
	261: "IAB17_19",
	262: "IAB17_20",
	263: "IAB17_21",
	264: "IAB17_22",
	265: "IAB17_23",
	266: "IAB17_24",
	267: "IAB17_25",
	268: "IAB17_26",
	269: "IAB17_27",
	270: "IAB17_28",
	271: "IAB17_29",
	272: "IAB17_30",
	273: "IAB17_31",
	274: "IAB17_32",
	275: "IAB17_33",
	276: "IAB17_34",
	277: "IAB17_35",
	278: "IAB17_36",
	279: "IAB17_37",
	280: "IAB17_38",
	281: "IAB17_39",
	282: "IAB17_40",
	283: "IAB17_41",
	284: "IAB17_42",
	285: "IAB17_43",
	286: "IAB17_44",
	287: "IAB18",
	288: "IAB18_1",
	289: "IAB18_2",
	290: "IAB18_3",
	291: "IAB18_4",
	292: "IAB18_5",
	293: "IAB18_6",
	294: "IAB19",
	295: "IAB19_1",
	296: "IAB19_2",
	297: "IAB19_3",
	298: "IAB19_4",
	299: "IAB19_5",
	300: "IAB19_6",
	301: "IAB19_7",
	302: "IAB19_8",
	303: "IAB19_9",
	304: "IAB19_10",
	305: "IAB19_11",
	306: "IAB19_12",
	307: "IAB19_13",
	308: "IAB19_14",
	309: "IAB19_15",
	310: "IAB19_16",
	311: "IAB19_17",
	312: "IAB19_18",
	313: "IAB19_19",
	314: "IAB19_20",
	315: "IAB19_21",
	316: "IAB19_22",
	317: "IAB19_23",
	318: "IAB19_24",
	319: "IAB19_25",
	320: "IAB19_26",
	321: "IAB19_27",
	322: "IAB19_28",
	323: "IAB19_29",
	324: "IAB19_30",
	325: "IAB19_31",
	326: "IAB19_32",
	327: "IAB19_33",
	328: "IAB19_34",
	329: "IAB19_35",
	330: "IAB19_36",
	331: "IAB20",
	332: "IAB20_1",
	333: "IAB20_2",
	334: "IAB20_3",
	335: "IAB20_4",
	336: "IAB20_5",
	337: "IAB20_6",
	338: "IAB20_7",
	339: "IAB20_8",
	340: "IAB20_9",
	341: "IAB20_10",
	342: "IAB20_11",
	343: "IAB20_12",
	344: "IAB20_13",
	345: "IAB20_14",
	346: "IAB20_15",
	347: "IAB20_16",
	348: "IAB20_17",
	349: "IAB20_18",
	350: "IAB20_19",
	351: "IAB20_20",
	352: "IAB20_21",
	353: "IAB20_22",
	354: "IAB20_23",
	355: "IAB20_24",
	356: "IAB20_25",
	357: "IAB20_26",
	358: "IAB20_27",
	359: "IAB21",
	360: "IAB21_1",
	361: "IAB21_2",
	362: "IAB21_3",
	363: "IAB22",
	364: "IAB22_1",
	365: "IAB22_2",
	366: "IAB22_3",
	367: "IAB22_4",
	368: "IAB23",
	369: "IAB23_1",
	370: "IAB23_2",
	371: "IAB23_3",
	372: "IAB23_4",
	373: "IAB23_5",
	374: "IAB23_6",
	375: "IAB23_7",
	376: "IAB23_8",
	377: "IAB23_9",
	378: "IAB23_10",
	379: "IAB24",
	380: "IAB25",
	381: "IAB25_1",
	382: "IAB25_2",
	383: "IAB25_3",
	384: "IAB25_4",
	385: "IAB25_5",
	386: "IAB25_6",
	387: "IAB25_7",
	388: "IAB26",
	389: "IAB26_1",
	390: "IAB26_2",
	391: "IAB26_3",
	392: "IAB26_4",
}
var ContentCategory_value = map[string]int32{
	"IAB1":     1,
	"IAB1_1":   2,
	"IAB1_2":   3,
	"IAB1_3":   4,
	"IAB1_4":   5,
	"IAB1_5":   6,
	"IAB1_6":   7,
	"IAB1_7":   8,
	"IAB2":     9,
	"IAB2_1":   10,
	"IAB2_2":   11,
	"IAB2_3":   12,
	"IAB2_4":   13,
	"IAB2_5":   14,
	"IAB2_6":   15,
	"IAB2_7":   16,
	"IAB2_8":   17,
	"IAB2_9":   18,
	"IAB2_10":  19,
	"IAB2_11":  20,
	"IAB2_12":  21,
	"IAB2_13":  22,
	"IAB2_14":  23,
	"IAB2_15":  24,
	"IAB2_16":  25,
	"IAB2_17":  26,
	"IAB2_18":  27,
	"IAB2_19":  28,
	"IAB2_20":  29,
	"IAB2_21":  30,
	"IAB2_22":  31,
	"IAB2_23":  32,
	"IAB3":     33,
	"IAB3_1":   34,
	"IAB3_2":   35,
	"IAB3_3":   36,
	"IAB3_4":   37,
	"IAB3_5":   38,
	"IAB3_6":   39,
	"IAB3_7":   40,
	"IAB3_8":   41,
	"IAB3_9":   42,
	"IAB3_10":  43,
	"IAB3_11":  44,
	"IAB3_12":  45,
	"IAB4":     46,
	"IAB4_1":   47,
	"IAB4_2":   48,
	"IAB4_3":   49,
	"IAB4_4":   50,
	"IAB4_5":   51,
	"IAB4_6":   52,
	"IAB4_7":   53,
	"IAB4_8":   54,
	"IAB4_9":   55,
	"IAB4_10":  56,
	"IAB4_11":  57,
	"IAB5":     58,
	"IAB5_1":   59,
	"IAB5_2":   60,
	"IAB5_3":   61,
	"IAB5_4":   62,
	"IAB5_5":   63,
	"IAB5_6":   64,
	"IAB5_7":   65,
	"IAB5_8":   66,
	"IAB5_9":   67,
	"IAB5_10":  68,
	"IAB5_11":  69,
	"IAB5_12":  70,
	"IAB5_13":  71,
	"IAB5_14":  72,
	"IAB5_15":  73,
	"IAB6":     74,
	"IAB6_1":   75,
	"IAB6_2":   76,
	"IAB6_3":   77,
	"IAB6_4":   78,
	"IAB6_5":   79,
	"IAB6_6":   80,
	"IAB6_7":   81,
	"IAB6_8":   82,
	"IAB6_9":   83,
	"IAB7":     84,
	"IAB7_1":   85,
	"IAB7_2":   86,
	"IAB7_3":   87,
	"IAB7_4":   88,
	"IAB7_5":   89,
	"IAB7_6":   90,
	"IAB7_7":   91,
	"IAB7_8":   92,
	"IAB7_9":   93,
	"IAB7_10":  94,
	"IAB7_11":  95,
	"IAB7_12":  96,
	"IAB7_13":  97,
	"IAB7_14":  98,
	"IAB7_15":  99,
	"IAB7_16":  100,
	"IAB7_17":  101,
	"IAB7_18":  102,
	"IAB7_19":  103,
	"IAB7_20":  104,
	"IAB7_21":  105,
	"IAB7_22":  106,
	"IAB7_23":  107,
	"IAB7_24":  108,
	"IAB7_25":  109,
	"IAB7_26":  110,
	"IAB7_27":  111,
	"IAB7_28":  112,
	"IAB7_29":  113,
	"IAB7_30":  114,
	"IAB7_31":  115,
	"IAB7_32":  116,
	"IAB7_33":  117,
	"IAB7_34":  118,
	"IAB7_35":  119,
	"IAB7_36":  120,
	"IAB7_37":  121,
	"IAB7_38":  122,
	"IAB7_39":  123,
	"IAB7_40":  124,
	"IAB7_41":  125,
	"IAB7_42":  126,
	"IAB7_43":  127,
	"IAB7_44":  128,
	"IAB7_45":  129,
	"IAB8":     130,
	"IAB8_1":   131,
	"IAB8_2":   132,
	"IAB8_3":   133,
	"IAB8_4":   134,
	"IAB8_5":   135,
	"IAB8_6":   136,
	"IAB8_7":   137,
	"IAB8_8":   138,
	"IAB8_9":   139,
	"IAB8_10":  140,
	"IAB8_11":  141,
	"IAB8_12":  142,
	"IAB8_13":  143,
	"IAB8_14":  144,
	"IAB8_15":  145,
	"IAB8_16":  146,
	"IAB8_17":  147,
	"IAB8_18":  148,
	"IAB9":     149,
	"IAB9_1":   150,
	"IAB9_2":   151,
	"IAB9_3":   152,
	"IAB9_4":   153,
	"IAB9_5":   154,
	"IAB9_6":   155,
	"IAB9_7":   156,
	"IAB9_8":   157,
	"IAB9_9":   158,
	"IAB9_10":  159,
	"IAB9_11":  160,
	"IAB9_12":  161,
	"IAB9_13":  162,
	"IAB9_14":  163,
	"IAB9_15":  164,
	"IAB9_16":  165,
	"IAB9_17":  166,
	"IAB9_18":  167,
	"IAB9_19":  168,
	"IAB9_20":  169,
	"IAB9_21":  170,
	"IAB9_22":  171,
	"IAB9_23":  172,
	"IAB9_24":  173,
	"IAB9_25":  174,
	"IAB9_26":  175,
	"IAB9_27":  176,
	"IAB9_28":  177,
	"IAB9_29":  178,
	"IAB9_30":  179,
	"IAB9_31":  180,
	"IAB10":    181,
	"IAB10_1":  182,
	"IAB10_2":  183,
	"IAB10_3":  184,
	"IAB10_4":  185,
	"IAB10_5":  186,
	"IAB10_6":  187,
	"IAB10_7":  188,
	"IAB10_8":  189,
	"IAB10_9":  190,
	"IAB11":    191,
	"IAB11_1":  192,
	"IAB11_2":  193,
	"IAB11_3":  194,
	"IAB11_4":  195,
	"IAB11_5":  196,
	"IAB12":    197,
	"IAB12_1":  198,
	"IAB12_2":  199,
	"IAB12_3":  200,
	"IAB13":    201,
	"IAB13_1":  202,
	"IAB13_2":  203,
	"IAB13_3":  204,
	"IAB13_4":  205,
	"IAB13_5":  206,
	"IAB13_6":  207,
	"IAB13_7":  208,
	"IAB13_8":  209,
	"IAB13_9":  210,
	"IAB13_10": 211,
	"IAB13_11": 212,
	"IAB13_12": 213,
	"IAB14":    214,
	"IAB14_1":  215,
	"IAB14_2":  216,
	"IAB14_3":  217,
	"IAB14_4":  218,
	"IAB14_5":  219,
	"IAB14_6":  220,
	"IAB14_7":  221,
	"IAB14_8":  222,
	"IAB15":    223,
	"IAB15_1":  224,
	"IAB15_2":  225,
	"IAB15_3":  226,
	"IAB15_4":  227,
	"IAB15_5":  228,
	"IAB15_6":  229,
	"IAB15_7":  230,
	"IAB15_8":  231,
	"IAB15_9":  232,
	"IAB15_10": 233,
	"IAB16":    234,
	"IAB16_1":  235,
	"IAB16_2":  236,
	"IAB16_3":  237,
	"IAB16_4":  238,
	"IAB16_5":  239,
	"IAB16_6":  240,
	"IAB16_7":  241,
	"IAB17":    242,
	"IAB17_1":  243,
	"IAB17_2":  244,
	"IAB17_3":  245,
	"IAB17_4":  246,
	"IAB17_5":  247,
	"IAB17_6":  248,
	"IAB17_7":  249,
	"IAB17_8":  250,
	"IAB17_9":  251,
	"IAB17_10": 252,
	"IAB17_11": 253,
	"IAB17_12": 254,
	"IAB17_13": 255,
	"IAB17_14": 256,
	"IAB17_15": 257,
	"IAB17_16": 258,
	"IAB17_17": 259,
	"IAB17_18": 260,
	"IAB17_19": 261,
	"IAB17_20": 262,
	"IAB17_21": 263,
	"IAB17_22": 264,
	"IAB17_23": 265,
	"IAB17_24": 266,
	"IAB17_25": 267,
	"IAB17_26": 268,
	"IAB17_27": 269,
	"IAB17_28": 270,
	"IAB17_29": 271,
	"IAB17_30": 272,
	"IAB17_31": 273,
	"IAB17_32": 274,
	"IAB17_33": 275,
	"IAB17_34": 276,
	"IAB17_35": 277,
	"IAB17_36": 278,
	"IAB17_37": 279,
	"IAB17_38": 280,
	"IAB17_39": 281,
	"IAB17_40": 282,
	"IAB17_41": 283,
	"IAB17_42": 284,
	"IAB17_43": 285,
	"IAB17_44": 286,
	"IAB18":    287,
	"IAB18_1":  288,
	"IAB18_2":  289,
	"IAB18_3":  290,
	"IAB18_4":  291,
	"IAB18_5":  292,
	"IAB18_6":  293,
	"IAB19":    294,
	"IAB19_1":  295,
	"IAB19_2":  296,
	"IAB19_3":  297,
	"IAB19_4":  298,
	"IAB19_5":  299,
	"IAB19_6":  300,
	"IAB19_7":  301,
	"IAB19_8":  302,
	"IAB19_9":  303,
	"IAB19_10": 304,
	"IAB19_11": 305,
	"IAB19_12": 306,
	"IAB19_13": 307,
	"IAB19_14": 308,
	"IAB19_15": 309,
	"IAB19_16": 310,
	"IAB19_17": 311,
	"IAB19_18": 312,
	"IAB19_19": 313,
	"IAB19_20": 314,
	"IAB19_21": 315,
	"IAB19_22": 316,
	"IAB19_23": 317,
	"IAB19_24": 318,
	"IAB19_25": 319,
	"IAB19_26": 320,
	"IAB19_27": 321,
	"IAB19_28": 322,
	"IAB19_29": 323,
	"IAB19_30": 324,
	"IAB19_31": 325,
	"IAB19_32": 326,
	"IAB19_33": 327,
	"IAB19_34": 328,
	"IAB19_35": 329,
	"IAB19_36": 330,
	"IAB20":    331,
	"IAB20_1":  332,
	"IAB20_2":  333,
	"IAB20_3":  334,
	"IAB20_4":  335,
	"IAB20_5":  336,
	"IAB20_6":  337,
	"IAB20_7":  338,
	"IAB20_8":  339,
	"IAB20_9":  340,
	"IAB20_10": 341,
	"IAB20_11": 342,
	"IAB20_12": 343,
	"IAB20_13": 344,
	"IAB20_14": 345,
	"IAB20_15": 346,
	"IAB20_16": 347,
	"IAB20_17": 348,
	"IAB20_18": 349,
	"IAB20_19": 350,
	"IAB20_20": 351,
	"IAB20_21": 352,
	"IAB20_22": 353,
	"IAB20_23": 354,
	"IAB20_24": 355,
	"IAB20_25": 356,
	"IAB20_26": 357,
	"IAB20_27": 358,
	"IAB21":    359,
	"IAB21_1":  360,
	"IAB21_2":  361,
	"IAB21_3":  362,
	"IAB22":    363,
	"IAB22_1":  364,
	"IAB22_2":  365,
	"IAB22_3":  366,
	"IAB22_4":  367,
	"IAB23":    368,
	"IAB23_1":  369,
	"IAB23_2":  370,
	"IAB23_3":  371,
	"IAB23_4":  372,
	"IAB23_5":  373,
	"IAB23_6":  374,
	"IAB23_7":  375,
	"IAB23_8":  376,
	"IAB23_9":  377,
	"IAB23_10": 378,
	"IAB24":    379,
	"IAB25":    380,
	"IAB25_1":  381,
	"IAB25_2":  382,
	"IAB25_3":  383,
	"IAB25_4":  384,
	"IAB25_5":  385,
	"IAB25_6":  386,
	"IAB25_7":  387,
	"IAB26":    388,
	"IAB26_1":  389,
	"IAB26_2":  390,
	"IAB26_3":  391,
	"IAB26_4":  392,
}

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}
func (x ContentCategory) String() string {
	return proto.EnumName(ContentCategory_name, int32(x))
}
func (x *ContentCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentCategory_value, data, "ContentCategory")
	if err != nil {
		return err
	}
	*x = ContentCategory(value)
	return nil
}

// OpenRTB 5.3: The following table specifies a standard list of creative
// attributes that can describe an ad being served or serve as restrictions
// of thereof.
type CreativeAttribute int32

const (
	CreativeAttribute_AUDIO_AUTO_PLAY                CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED           CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC           CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED     CreativeAttribute = 4
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED  CreativeAttribute = 5
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY      CreativeAttribute = 6
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP                            CreativeAttribute = 8
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	// Defined as "Shaky, Flashing, Flickering, Extreme Animation, Smileys".
	CreativeAttribute_ANNOYING                      CreativeAttribute = 10
	CreativeAttribute_SURVEYS                       CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                     CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE              CreativeAttribute = 13
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON       CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED             CreativeAttribute = 16
)

var CreativeAttribute_name = map[int32]string{
	1:  "AUDIO_AUTO_PLAY",
	2:  "AUDIO_USER_INITIATED",
	3:  "EXPANDABLE_AUTOMATIC",
	4:  "EXPANDABLE_CLICK_INITIATED",
	5:  "EXPANDABLE_ROLLOVER_INITIATED",
	6:  "VIDEO_IN_BANNER_AUTO_PLAY",
	7:  "VIDEO_IN_BANNER_USER_INITIATED",
	8:  "POP",
	9:  "PROVOCATIVE_OR_SUGGESTIVE",
	10: "ANNOYING",
	11: "SURVEYS",
	12: "TEXT_ONLY",
	13: "USER_INTERACTIVE",
	14: "WINDOWS_DIALOG_OR_ALERT_STYLE",
	15: "HAS_AUDIO_ON_OFF_BUTTON",
	16: "AD_CAN_BE_SKIPPED",
}
var CreativeAttribute_value = map[string]int32{
	"AUDIO_AUTO_PLAY":                1,
	"AUDIO_USER_INITIATED":           2,
	"EXPANDABLE_AUTOMATIC":           3,
	"EXPANDABLE_CLICK_INITIATED":     4,
	"EXPANDABLE_ROLLOVER_INITIATED":  5,
	"VIDEO_IN_BANNER_AUTO_PLAY":      6,
	"VIDEO_IN_BANNER_USER_INITIATED": 7,
	"POP":                            8,
	"PROVOCATIVE_OR_SUGGESTIVE":      9,
	"ANNOYING":                       10,
	"SURVEYS":                        11,
	"TEXT_ONLY":                      12,
	"USER_INTERACTIVE":               13,
	"WINDOWS_DIALOG_OR_ALERT_STYLE":  14,
	"HAS_AUDIO_ON_OFF_BUTTON":        15,
	"AD_CAN_BE_SKIPPED":              16,
}

func (x CreativeAttribute) Enum() *CreativeAttribute {
	p := new(CreativeAttribute)
	*p = x
	return p
}
func (x CreativeAttribute) String() string {
	return proto.EnumName(CreativeAttribute_name, int32(x))
}
func (x *CreativeAttribute) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CreativeAttribute_value, data, "CreativeAttribute")
	if err != nil {
		return err
	}
	*x = CreativeAttribute(value)
	return nil
}

type BidRequest_AuctionType int32

const (
	BidRequest_FIRST_PRICE  BidRequest_AuctionType = 1
	BidRequest_SECOND_PRICE BidRequest_AuctionType = 2
	BidRequest_FIXED_PRICE  BidRequest_AuctionType = 3
)

var BidRequest_AuctionType_name = map[int32]string{
	1: "FIRST_PRICE",
	2: "SECOND_PRICE",
	3: "FIXED_PRICE",
}
var BidRequest_AuctionType_value = map[string]int32{
	"FIRST_PRICE":  1,
	"SECOND_PRICE": 2,
	"FIXED_PRICE":  3,
}

func (x BidRequest_AuctionType) Enum() *BidRequest_AuctionType {
	p := new(BidRequest_AuctionType)
	*p = x
	return p
}
func (x BidRequest_AuctionType) String() string {
	return proto.EnumName(BidRequest_AuctionType_name, int32(x))
}
func (x *BidRequest_AuctionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_AuctionType_value, data, "BidRequest_AuctionType")
	if err != nil {
		return err
	}
	*x = BidRequest_AuctionType(value)
	return nil
}

// OpenRTB 5.4: The following table specifies the position of the ad as a
// relative measure of visibility or prominence.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net. Values "3" - "6" apply to apps
// per the mobile addendum to QAG version 1.5.
type BidRequest_Imp_AdPosition int32

const (
	BidRequest_Imp_UNKNOWN        BidRequest_Imp_AdPosition = 0
	BidRequest_Imp_ABOVE_THE_FOLD BidRequest_Imp_AdPosition = 1
	// May or may not be immediately visible depending on screen size and
	// resolution.
	// @deprecated
	BidRequest_Imp_DEPRECATED_LIKELY_BELOW_THE_FOLD BidRequest_Imp_AdPosition = 2
	BidRequest_Imp_BELOW_THE_FOLD                   BidRequest_Imp_AdPosition = 3
	BidRequest_Imp_HEADER                           BidRequest_Imp_AdPosition = 4
	BidRequest_Imp_FOOTER                           BidRequest_Imp_AdPosition = 5
	BidRequest_Imp_SIDEBAR                          BidRequest_Imp_AdPosition = 6
	BidRequest_Imp_AD_POSITION_FULLSCREEN           BidRequest_Imp_AdPosition = 7
)

var BidRequest_Imp_AdPosition_name = map[int32]string{
	0: "UNKNOWN",
	1: "ABOVE_THE_FOLD",
	2: "DEPRECATED_LIKELY_BELOW_THE_FOLD",
	3: "BELOW_THE_FOLD",
	4: "HEADER",
	5: "FOOTER",
	6: "SIDEBAR",
	7: "AD_POSITION_FULLSCREEN",
}
var BidRequest_Imp_AdPosition_value = map[string]int32{
	"UNKNOWN":                          0,
	"ABOVE_THE_FOLD":                   1,
	"DEPRECATED_LIKELY_BELOW_THE_FOLD": 2,
	"BELOW_THE_FOLD":                   3,
	"HEADER":                           4,
	"FOOTER":                           5,
	"SIDEBAR":                          6,
	"AD_POSITION_FULLSCREEN":           7,
}

func (x BidRequest_Imp_AdPosition) Enum() *BidRequest_Imp_AdPosition {
	p := new(BidRequest_Imp_AdPosition)
	*p = x
	return p
}
func (x BidRequest_Imp_AdPosition) String() string {
	return proto.EnumName(BidRequest_Imp_AdPosition_name, int32(x))
}
func (x *BidRequest_Imp_AdPosition) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_AdPosition_value, data, "BidRequest_Imp_AdPosition")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_AdPosition(value)
	return nil
}

// OpenRTB 5.6: The following table is a list of API frameworks supported
// by the publisher.  Note that MRAID-1 is a subset of MRAID-2.
// In OpenRTB 2.1 and prior, value "3" was "MRAID".  However, not all
// MRAID capable APIs understand MRAID-2 features and as such the only
// safe interpretation of value "3" is MRAID-1. In OpenRTB 2.2, this was
// made explicit and MRAID-2 has been added as value "5".
type BidRequest_Imp_APIFramework int32

const (
	BidRequest_Imp_VPAID_1 BidRequest_Imp_APIFramework = 1
	BidRequest_Imp_VPAID_2 BidRequest_Imp_APIFramework = 2
	BidRequest_Imp_MRAID_1 BidRequest_Imp_APIFramework = 3
	BidRequest_Imp_ORMMA   BidRequest_Imp_APIFramework = 4
	BidRequest_Imp_MRAID_2 BidRequest_Imp_APIFramework = 5
)

var BidRequest_Imp_APIFramework_name = map[int32]string{
	1: "VPAID_1",
	2: "VPAID_2",
	3: "MRAID_1",
	4: "ORMMA",
	5: "MRAID_2",
}
var BidRequest_Imp_APIFramework_value = map[string]int32{
	"VPAID_1": 1,
	"VPAID_2": 2,
	"MRAID_1": 3,
	"ORMMA":   4,
	"MRAID_2": 5,
}

func (x BidRequest_Imp_APIFramework) Enum() *BidRequest_Imp_APIFramework {
	p := new(BidRequest_Imp_APIFramework)
	*p = x
	return p
}
func (x BidRequest_Imp_APIFramework) String() string {
	return proto.EnumName(BidRequest_Imp_APIFramework_name, int32(x))
}
func (x *BidRequest_Imp_APIFramework) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_APIFramework_value, data, "BidRequest_Imp_APIFramework")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_APIFramework(value)
	return nil
}

// OpenRTB 5.2: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type BidRequest_Imp_Banner_BannerAdType int32

const (
	// "Usually mobile".
	BidRequest_Imp_Banner_XHTML_TEXT_AD BidRequest_Imp_Banner_BannerAdType = 1
	// "Usually mobile".
	BidRequest_Imp_Banner_XHTML_BANNER_AD BidRequest_Imp_Banner_BannerAdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	BidRequest_Imp_Banner_JAVASCRIPT_AD BidRequest_Imp_Banner_BannerAdType = 3
	// Iframe.
	BidRequest_Imp_Banner_IFRAME BidRequest_Imp_Banner_BannerAdType = 4
)

var BidRequest_Imp_Banner_BannerAdType_name = map[int32]string{
	1: "XHTML_TEXT_AD",
	2: "XHTML_BANNER_AD",
	3: "JAVASCRIPT_AD",
	4: "IFRAME",
}
var BidRequest_Imp_Banner_BannerAdType_value = map[string]int32{
	"XHTML_TEXT_AD":   1,
	"XHTML_BANNER_AD": 2,
	"JAVASCRIPT_AD":   3,
	"IFRAME":          4,
}

func (x BidRequest_Imp_Banner_BannerAdType) Enum() *BidRequest_Imp_Banner_BannerAdType {
	p := new(BidRequest_Imp_Banner_BannerAdType)
	*p = x
	return p
}
func (x BidRequest_Imp_Banner_BannerAdType) String() string {
	return proto.EnumName(BidRequest_Imp_Banner_BannerAdType_name, int32(x))
}
func (x *BidRequest_Imp_Banner_BannerAdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Banner_BannerAdType_value, data, "BidRequest_Imp_Banner_BannerAdType")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Banner_BannerAdType(value)
	return nil
}

// OpenRTB 5.5: The following table lists the directions in which an
// expandable ad may expand, given the positioning of the ad unit on the
// page and constraints imposed by the content.
type BidRequest_Imp_Banner_ExpandableDirection int32

const (
	BidRequest_Imp_Banner_LEFT                  BidRequest_Imp_Banner_ExpandableDirection = 1
	BidRequest_Imp_Banner_RIGHT                 BidRequest_Imp_Banner_ExpandableDirection = 2
	BidRequest_Imp_Banner_UP                    BidRequest_Imp_Banner_ExpandableDirection = 3
	BidRequest_Imp_Banner_DOWN                  BidRequest_Imp_Banner_ExpandableDirection = 4
	BidRequest_Imp_Banner_EXPANDABLE_FULLSCREEN BidRequest_Imp_Banner_ExpandableDirection = 5
)

var BidRequest_Imp_Banner_ExpandableDirection_name = map[int32]string{
	1: "LEFT",
	2: "RIGHT",
	3: "UP",
	4: "DOWN",
	5: "EXPANDABLE_FULLSCREEN",
}
var BidRequest_Imp_Banner_ExpandableDirection_value = map[string]int32{
	"LEFT":                  1,
	"RIGHT":                 2,
	"UP":                    3,
	"DOWN":                  4,
	"EXPANDABLE_FULLSCREEN": 5,
}

func (x BidRequest_Imp_Banner_ExpandableDirection) Enum() *BidRequest_Imp_Banner_ExpandableDirection {
	p := new(BidRequest_Imp_Banner_ExpandableDirection)
	*p = x
	return p
}
func (x BidRequest_Imp_Banner_ExpandableDirection) String() string {
	return proto.EnumName(BidRequest_Imp_Banner_ExpandableDirection_name, int32(x))
}
func (x *BidRequest_Imp_Banner_ExpandableDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Banner_ExpandableDirection_value, data, "BidRequest_Imp_Banner_ExpandableDirection")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Banner_ExpandableDirection(value)
	return nil
}

// OpenRTB 5.7: The following table indicates the options for video
// linearity. "In-stream" or "linear" video refers to pre-roll, post-roll,
// or mid-roll video ads where the user is forced to watch ad in order to
// see the video content. "Overlay" or "non-linear" refer to ads that are
// shown on top of the video content.
//
// This field is optional. The following is the interpretation of the
// bidder based upon presence or absence of the field in the bid request:
// - If no value is set, any ad (linear or not) can be present
//   in the response.
// - If a value is set, only ads of the corresponding type can be present
//   in the response.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type BidRequest_Imp_Video_VideoLinearity int32

const (
	BidRequest_Imp_Video_LINEAR     BidRequest_Imp_Video_VideoLinearity = 1
	BidRequest_Imp_Video_NON_LINEAR BidRequest_Imp_Video_VideoLinearity = 2
)

var BidRequest_Imp_Video_VideoLinearity_name = map[int32]string{
	1: "LINEAR",
	2: "NON_LINEAR",
}
var BidRequest_Imp_Video_VideoLinearity_value = map[string]int32{
	"LINEAR":     1,
	"NON_LINEAR": 2,
}

func (x BidRequest_Imp_Video_VideoLinearity) Enum() *BidRequest_Imp_Video_VideoLinearity {
	p := new(BidRequest_Imp_Video_VideoLinearity)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_VideoLinearity) String() string {
	return proto.EnumName(BidRequest_Imp_Video_VideoLinearity_name, int32(x))
}
func (x *BidRequest_Imp_Video_VideoLinearity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_VideoLinearity_value, data, "BidRequest_Imp_Video_VideoLinearity")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_VideoLinearity(value)
	return nil
}

// OpenRTB 5.8: The following table lists the options for video bid
// response protocols that could be supported by an exchange.
type BidRequest_Imp_Video_VideoBidResponseProtocol int32

const (
	BidRequest_Imp_Video_VAST_1_0         BidRequest_Imp_Video_VideoBidResponseProtocol = 1
	BidRequest_Imp_Video_VAST_2_0         BidRequest_Imp_Video_VideoBidResponseProtocol = 2
	BidRequest_Imp_Video_VAST_3_0         BidRequest_Imp_Video_VideoBidResponseProtocol = 3
	BidRequest_Imp_Video_VAST_1_0_WRAPPER BidRequest_Imp_Video_VideoBidResponseProtocol = 4
	BidRequest_Imp_Video_VAST_2_0_WRAPPER BidRequest_Imp_Video_VideoBidResponseProtocol = 5
	BidRequest_Imp_Video_VAST_3_0_WRAPPER BidRequest_Imp_Video_VideoBidResponseProtocol = 6
)

var BidRequest_Imp_Video_VideoBidResponseProtocol_name = map[int32]string{
	1: "VAST_1_0",
	2: "VAST_2_0",
	3: "VAST_3_0",
	4: "VAST_1_0_WRAPPER",
	5: "VAST_2_0_WRAPPER",
	6: "VAST_3_0_WRAPPER",
}
var BidRequest_Imp_Video_VideoBidResponseProtocol_value = map[string]int32{
	"VAST_1_0":         1,
	"VAST_2_0":         2,
	"VAST_3_0":         3,
	"VAST_1_0_WRAPPER": 4,
	"VAST_2_0_WRAPPER": 5,
	"VAST_3_0_WRAPPER": 6,
}

func (x BidRequest_Imp_Video_VideoBidResponseProtocol) Enum() *BidRequest_Imp_Video_VideoBidResponseProtocol {
	p := new(BidRequest_Imp_Video_VideoBidResponseProtocol)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_VideoBidResponseProtocol) String() string {
	return proto.EnumName(BidRequest_Imp_Video_VideoBidResponseProtocol_name, int32(x))
}
func (x *BidRequest_Imp_Video_VideoBidResponseProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_VideoBidResponseProtocol_value, data, "BidRequest_Imp_Video_VideoBidResponseProtocol")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_VideoBidResponseProtocol(value)
	return nil
}

// OpenRTB 5.9: The following table lists the various
// video playback methods.
type BidRequest_Imp_Video_VideoPlaybackMethod int32

const (
	BidRequest_Imp_Video_AUTO_PLAY_SOUND_ON  BidRequest_Imp_Video_VideoPlaybackMethod = 1
	BidRequest_Imp_Video_AUTO_PLAY_SOUND_OFF BidRequest_Imp_Video_VideoPlaybackMethod = 2
	BidRequest_Imp_Video_CLICK_TO_PLAY       BidRequest_Imp_Video_VideoPlaybackMethod = 3
	BidRequest_Imp_Video_MOUSE_OVER          BidRequest_Imp_Video_VideoPlaybackMethod = 4
)

var BidRequest_Imp_Video_VideoPlaybackMethod_name = map[int32]string{
	1: "AUTO_PLAY_SOUND_ON",
	2: "AUTO_PLAY_SOUND_OFF",
	3: "CLICK_TO_PLAY",
	4: "MOUSE_OVER",
}
var BidRequest_Imp_Video_VideoPlaybackMethod_value = map[string]int32{
	"AUTO_PLAY_SOUND_ON":  1,
	"AUTO_PLAY_SOUND_OFF": 2,
	"CLICK_TO_PLAY":       3,
	"MOUSE_OVER":          4,
}

func (x BidRequest_Imp_Video_VideoPlaybackMethod) Enum() *BidRequest_Imp_Video_VideoPlaybackMethod {
	p := new(BidRequest_Imp_Video_VideoPlaybackMethod)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_VideoPlaybackMethod) String() string {
	return proto.EnumName(BidRequest_Imp_Video_VideoPlaybackMethod_name, int32(x))
}
func (x *BidRequest_Imp_Video_VideoPlaybackMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_VideoPlaybackMethod_value, data, "BidRequest_Imp_Video_VideoPlaybackMethod")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_VideoPlaybackMethod(value)
	return nil
}

// OpenRTB 5.10: The following table lists the various options for the
// video start delay.  If the start delay value is greater than 0,
// then the position is mid-roll and the value indicates the start delay.
type BidRequest_Imp_Video_VideoStartDelay int32

const (
	BidRequest_Imp_Video_PRE_ROLL          BidRequest_Imp_Video_VideoStartDelay = 0
	BidRequest_Imp_Video_GENERIC_MID_ROLL  BidRequest_Imp_Video_VideoStartDelay = -1
	BidRequest_Imp_Video_GENERIC_POST_ROLL BidRequest_Imp_Video_VideoStartDelay = -2
)

var BidRequest_Imp_Video_VideoStartDelay_name = map[int32]string{
	0:  "PRE_ROLL",
	-1: "GENERIC_MID_ROLL",
	-2: "GENERIC_POST_ROLL",
}
var BidRequest_Imp_Video_VideoStartDelay_value = map[string]int32{
	"PRE_ROLL":          0,
	"GENERIC_MID_ROLL":  -1,
	"GENERIC_POST_ROLL": -2,
}

func (x BidRequest_Imp_Video_VideoStartDelay) Enum() *BidRequest_Imp_Video_VideoStartDelay {
	p := new(BidRequest_Imp_Video_VideoStartDelay)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_VideoStartDelay) String() string {
	return proto.EnumName(BidRequest_Imp_Video_VideoStartDelay_name, int32(x))
}
func (x *BidRequest_Imp_Video_VideoStartDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_VideoStartDelay_value, data, "BidRequest_Imp_Video_VideoStartDelay")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_VideoStartDelay(value)
	return nil
}

// OpenRTB 5.12: The following table lists the options for the
// video quality. These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type BidRequest_Imp_Video_VASTCompanionType int32

const (
	BidRequest_Imp_Video_STATIC           BidRequest_Imp_Video_VASTCompanionType = 1
	BidRequest_Imp_Video_HTML             BidRequest_Imp_Video_VASTCompanionType = 2
	BidRequest_Imp_Video_COMPANION_IFRAME BidRequest_Imp_Video_VASTCompanionType = 3
)

var BidRequest_Imp_Video_VASTCompanionType_name = map[int32]string{
	1: "STATIC",
	2: "HTML",
	3: "COMPANION_IFRAME",
}
var BidRequest_Imp_Video_VASTCompanionType_value = map[string]int32{
	"STATIC":           1,
	"HTML":             2,
	"COMPANION_IFRAME": 3,
}

func (x BidRequest_Imp_Video_VASTCompanionType) Enum() *BidRequest_Imp_Video_VASTCompanionType {
	p := new(BidRequest_Imp_Video_VASTCompanionType)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_VASTCompanionType) String() string {
	return proto.EnumName(BidRequest_Imp_Video_VASTCompanionType_name, int32(x))
}
func (x *BidRequest_Imp_Video_VASTCompanionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_VASTCompanionType_value, data, "BidRequest_Imp_Video_VASTCompanionType")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_VASTCompanionType(value)
	return nil
}

// OpenRTB 5.13: The following table lists the various options for the
// delivery of video content.
type BidRequest_Imp_Video_ContentDeliveryMethod int32

const (
	BidRequest_Imp_Video_STREAMING   BidRequest_Imp_Video_ContentDeliveryMethod = 1
	BidRequest_Imp_Video_PROGRESSIVE BidRequest_Imp_Video_ContentDeliveryMethod = 2
)

var BidRequest_Imp_Video_ContentDeliveryMethod_name = map[int32]string{
	1: "STREAMING",
	2: "PROGRESSIVE",
}
var BidRequest_Imp_Video_ContentDeliveryMethod_value = map[string]int32{
	"STREAMING":   1,
	"PROGRESSIVE": 2,
}

func (x BidRequest_Imp_Video_ContentDeliveryMethod) Enum() *BidRequest_Imp_Video_ContentDeliveryMethod {
	p := new(BidRequest_Imp_Video_ContentDeliveryMethod)
	*p = x
	return p
}
func (x BidRequest_Imp_Video_ContentDeliveryMethod) String() string {
	return proto.EnumName(BidRequest_Imp_Video_ContentDeliveryMethod_name, int32(x))
}
func (x *BidRequest_Imp_Video_ContentDeliveryMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Imp_Video_ContentDeliveryMethod_value, data, "BidRequest_Imp_Video_ContentDeliveryMethod")
	if err != nil {
		return err
	}
	*x = BidRequest_Imp_Video_ContentDeliveryMethod(value)
	return nil
}

// OpenRTB 5.11: The following table lists the options for the video quality.
// These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type BidRequest_Content_VideoQuality int32

const (
	BidRequest_Content_QUALITY_UNKNOWN BidRequest_Content_VideoQuality = 0
	BidRequest_Content_PROFESSIONAL    BidRequest_Content_VideoQuality = 1
	BidRequest_Content_PROSUMER        BidRequest_Content_VideoQuality = 2
	BidRequest_Content_USER_GENERATED  BidRequest_Content_VideoQuality = 3
)

var BidRequest_Content_VideoQuality_name = map[int32]string{
	0: "QUALITY_UNKNOWN",
	1: "PROFESSIONAL",
	2: "PROSUMER",
	3: "USER_GENERATED",
}
var BidRequest_Content_VideoQuality_value = map[string]int32{
	"QUALITY_UNKNOWN": 0,
	"PROFESSIONAL":    1,
	"PROSUMER":        2,
	"USER_GENERATED":  3,
}

func (x BidRequest_Content_VideoQuality) Enum() *BidRequest_Content_VideoQuality {
	p := new(BidRequest_Content_VideoQuality)
	*p = x
	return p
}
func (x BidRequest_Content_VideoQuality) String() string {
	return proto.EnumName(BidRequest_Content_VideoQuality_name, int32(x))
}
func (x *BidRequest_Content_VideoQuality) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Content_VideoQuality_value, data, "BidRequest_Content_VideoQuality")
	if err != nil {
		return err
	}
	*x = BidRequest_Content_VideoQuality(value)
	return nil
}

// OpenRTB 5.14: The following table lists the various options for
// indicating the type of content in which the impression will appear.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type BidRequest_Content_ContentContext int32

const (
	BidRequest_Content_VIDEO           BidRequest_Content_ContentContext = 1
	BidRequest_Content_GAME            BidRequest_Content_ContentContext = 2
	BidRequest_Content_MUSIC           BidRequest_Content_ContentContext = 3
	BidRequest_Content_APPLICATION     BidRequest_Content_ContentContext = 4
	BidRequest_Content_TEXT            BidRequest_Content_ContentContext = 5
	BidRequest_Content_OTHER           BidRequest_Content_ContentContext = 6
	BidRequest_Content_CONTEXT_UNKNOWN BidRequest_Content_ContentContext = 7
)

var BidRequest_Content_ContentContext_name = map[int32]string{
	1: "VIDEO",
	2: "GAME",
	3: "MUSIC",
	4: "APPLICATION",
	5: "TEXT",
	6: "OTHER",
	7: "CONTEXT_UNKNOWN",
}
var BidRequest_Content_ContentContext_value = map[string]int32{
	"VIDEO":           1,
	"GAME":            2,
	"MUSIC":           3,
	"APPLICATION":     4,
	"TEXT":            5,
	"OTHER":           6,
	"CONTEXT_UNKNOWN": 7,
}

func (x BidRequest_Content_ContentContext) Enum() *BidRequest_Content_ContentContext {
	p := new(BidRequest_Content_ContentContext)
	*p = x
	return p
}
func (x BidRequest_Content_ContentContext) String() string {
	return proto.EnumName(BidRequest_Content_ContentContext_name, int32(x))
}
func (x *BidRequest_Content_ContentContext) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Content_ContentContext_value, data, "BidRequest_Content_ContentContext")
	if err != nil {
		return err
	}
	*x = BidRequest_Content_ContentContext(value)
	return nil
}

// OpenRTB 5.15: The following table lists the media ratings used in
// describing content based on the QAG categorization.
// Refer to http://www.iab.net/ne_guidelines for more information.
type BidRequest_Content_QAGMediaRating int32

const (
	BidRequest_Content_ALL_AUDIENCES    BidRequest_Content_QAGMediaRating = 1
	BidRequest_Content_EVERYONE_OVER_12 BidRequest_Content_QAGMediaRating = 2
	BidRequest_Content_MATURE           BidRequest_Content_QAGMediaRating = 3
)

var BidRequest_Content_QAGMediaRating_name = map[int32]string{
	1: "ALL_AUDIENCES",
	2: "EVERYONE_OVER_12",
	3: "MATURE",
}
var BidRequest_Content_QAGMediaRating_value = map[string]int32{
	"ALL_AUDIENCES":    1,
	"EVERYONE_OVER_12": 2,
	"MATURE":           3,
}

func (x BidRequest_Content_QAGMediaRating) Enum() *BidRequest_Content_QAGMediaRating {
	p := new(BidRequest_Content_QAGMediaRating)
	*p = x
	return p
}
func (x BidRequest_Content_QAGMediaRating) String() string {
	return proto.EnumName(BidRequest_Content_QAGMediaRating_name, int32(x))
}
func (x *BidRequest_Content_QAGMediaRating) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Content_QAGMediaRating_value, data, "BidRequest_Content_QAGMediaRating")
	if err != nil {
		return err
	}
	*x = BidRequest_Content_QAGMediaRating(value)
	return nil
}

// OpenRTB 5.17: The following table lists the type of device from which the
// impression originated.
//
// OpenRTB version 2.2 of the specification added distinct values for Mobile
// and Tablet. It is recommended that any bidder adding support for 2.2
// treat a value of 1 as an acceptable alias of 4 & 5.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type BidRequest_Device_DeviceType int32

const (
	BidRequest_Device_MOBILE            BidRequest_Device_DeviceType = 1
	BidRequest_Device_PERSONAL_COMPUTER BidRequest_Device_DeviceType = 2
	BidRequest_Device_CONNECTED_TV      BidRequest_Device_DeviceType = 3
	BidRequest_Device_PHONE             BidRequest_Device_DeviceType = 4
	BidRequest_Device_TABLET            BidRequest_Device_DeviceType = 5
	BidRequest_Device_CONNECTED_DEVICE  BidRequest_Device_DeviceType = 6
	BidRequest_Device_SET_TOP_BOX       BidRequest_Device_DeviceType = 7
)

var BidRequest_Device_DeviceType_name = map[int32]string{
	1: "MOBILE",
	2: "PERSONAL_COMPUTER",
	3: "CONNECTED_TV",
	4: "PHONE",
	5: "TABLET",
	6: "CONNECTED_DEVICE",
	7: "SET_TOP_BOX",
}
var BidRequest_Device_DeviceType_value = map[string]int32{
	"MOBILE":            1,
	"PERSONAL_COMPUTER": 2,
	"CONNECTED_TV":      3,
	"PHONE":             4,
	"TABLET":            5,
	"CONNECTED_DEVICE":  6,
	"SET_TOP_BOX":       7,
}

func (x BidRequest_Device_DeviceType) Enum() *BidRequest_Device_DeviceType {
	p := new(BidRequest_Device_DeviceType)
	*p = x
	return p
}
func (x BidRequest_Device_DeviceType) String() string {
	return proto.EnumName(BidRequest_Device_DeviceType_name, int32(x))
}
func (x *BidRequest_Device_DeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Device_DeviceType_value, data, "BidRequest_Device_DeviceType")
	if err != nil {
		return err
	}
	*x = BidRequest_Device_DeviceType(value)
	return nil
}

// OpenRTB 5.18: The following table lists the various options for the
// type of device connectivity.
type BidRequest_Device_ConnectionType int32

const (
	BidRequest_Device_CONNECTION_UNKNOWN BidRequest_Device_ConnectionType = 0
	BidRequest_Device_ETHERNET           BidRequest_Device_ConnectionType = 1
	BidRequest_Device_WIFI               BidRequest_Device_ConnectionType = 2
	BidRequest_Device_CELL_UNKNOWN       BidRequest_Device_ConnectionType = 3
	BidRequest_Device_CELL_2G            BidRequest_Device_ConnectionType = 4
	BidRequest_Device_CELL_3G            BidRequest_Device_ConnectionType = 5
	BidRequest_Device_CELL_4G            BidRequest_Device_ConnectionType = 6
)

var BidRequest_Device_ConnectionType_name = map[int32]string{
	0: "CONNECTION_UNKNOWN",
	1: "ETHERNET",
	2: "WIFI",
	3: "CELL_UNKNOWN",
	4: "CELL_2G",
	5: "CELL_3G",
	6: "CELL_4G",
}
var BidRequest_Device_ConnectionType_value = map[string]int32{
	"CONNECTION_UNKNOWN": 0,
	"ETHERNET":           1,
	"WIFI":               2,
	"CELL_UNKNOWN":       3,
	"CELL_2G":            4,
	"CELL_3G":            5,
	"CELL_4G":            6,
}

func (x BidRequest_Device_ConnectionType) Enum() *BidRequest_Device_ConnectionType {
	p := new(BidRequest_Device_ConnectionType)
	*p = x
	return p
}
func (x BidRequest_Device_ConnectionType) String() string {
	return proto.EnumName(BidRequest_Device_ConnectionType_name, int32(x))
}
func (x *BidRequest_Device_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Device_ConnectionType_value, data, "BidRequest_Device_ConnectionType")
	if err != nil {
		return err
	}
	*x = BidRequest_Device_ConnectionType(value)
	return nil
}

// OpenRTB 5.16: The following table lists the options to indicate how the
// geographic information was determined.
type BidRequest_Geo_LocationType int32

const (
	BidRequest_Geo_GPS_LOCATION  BidRequest_Geo_LocationType = 1
	BidRequest_Geo_IP            BidRequest_Geo_LocationType = 2
	BidRequest_Geo_USER_PROVIDED BidRequest_Geo_LocationType = 3
)

var BidRequest_Geo_LocationType_name = map[int32]string{
	1: "GPS_LOCATION",
	2: "IP",
	3: "USER_PROVIDED",
}
var BidRequest_Geo_LocationType_value = map[string]int32{
	"GPS_LOCATION":  1,
	"IP":            2,
	"USER_PROVIDED": 3,
}

func (x BidRequest_Geo_LocationType) Enum() *BidRequest_Geo_LocationType {
	p := new(BidRequest_Geo_LocationType)
	*p = x
	return p
}
func (x BidRequest_Geo_LocationType) String() string {
	return proto.EnumName(BidRequest_Geo_LocationType_name, int32(x))
}
func (x *BidRequest_Geo_LocationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_Geo_LocationType_value, data, "BidRequest_Geo_LocationType")
	if err != nil {
		return err
	}
	*x = BidRequest_Geo_LocationType(value)
	return nil
}

type BidRequest_User_Gender int32

const (
	BidRequest_User_MALE   BidRequest_User_Gender = 1
	BidRequest_User_FEMALE BidRequest_User_Gender = 2
	BidRequest_User_OTHER  BidRequest_User_Gender = 3
)

var BidRequest_User_Gender_name = map[int32]string{
	1: "MALE",
	2: "FEMALE",
	3: "OTHER",
}
var BidRequest_User_Gender_value = map[string]int32{
	"MALE":   1,
	"FEMALE": 2,
	"OTHER":  3,
}

func (x BidRequest_User_Gender) Enum() *BidRequest_User_Gender {
	p := new(BidRequest_User_Gender)
	*p = x
	return p
}
func (x BidRequest_User_Gender) String() string {
	return proto.EnumName(BidRequest_User_Gender_name, int32(x))
}
func (x *BidRequest_User_Gender) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidRequest_User_Gender_value, data, "BidRequest_User_Gender")
	if err != nil {
		return err
	}
	*x = BidRequest_User_Gender(value)
	return nil
}

// OpenRTB 5.19: The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type BidResponse_NoBidReason int32

const (
	BidResponse_UNKNOWN_ERROR              BidResponse_NoBidReason = 0
	BidResponse_TECHNICAL_ERROR            BidResponse_NoBidReason = 1
	BidResponse_INVALID_REQUEST            BidResponse_NoBidReason = 2
	BidResponse_KNOWN_WEB_SPIDER           BidResponse_NoBidReason = 3
	BidResponse_SUSPECTED_NONHUMAN_TRAFFIC BidResponse_NoBidReason = 4
	BidResponse_CLOUD_DATACENTER_PROXYIP   BidResponse_NoBidReason = 5
	BidResponse_UNSUPPORTED_DEVICE         BidResponse_NoBidReason = 6
	BidResponse_BLOCKED_PUBLISHER          BidResponse_NoBidReason = 7
	BidResponse_UNMATCHED_USER             BidResponse_NoBidReason = 8
)

var BidResponse_NoBidReason_name = map[int32]string{
	0: "UNKNOWN_ERROR",
	1: "TECHNICAL_ERROR",
	2: "INVALID_REQUEST",
	3: "KNOWN_WEB_SPIDER",
	4: "SUSPECTED_NONHUMAN_TRAFFIC",
	5: "CLOUD_DATACENTER_PROXYIP",
	6: "UNSUPPORTED_DEVICE",
	7: "BLOCKED_PUBLISHER",
	8: "UNMATCHED_USER",
}
var BidResponse_NoBidReason_value = map[string]int32{
	"UNKNOWN_ERROR":              0,
	"TECHNICAL_ERROR":            1,
	"INVALID_REQUEST":            2,
	"KNOWN_WEB_SPIDER":           3,
	"SUSPECTED_NONHUMAN_TRAFFIC": 4,
	"CLOUD_DATACENTER_PROXYIP":   5,
	"UNSUPPORTED_DEVICE":         6,
	"BLOCKED_PUBLISHER":          7,
	"UNMATCHED_USER":             8,
}

func (x BidResponse_NoBidReason) Enum() *BidResponse_NoBidReason {
	p := new(BidResponse_NoBidReason)
	*p = x
	return p
}
func (x BidResponse_NoBidReason) String() string {
	return proto.EnumName(BidResponse_NoBidReason_name, int32(x))
}
func (x *BidResponse_NoBidReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BidResponse_NoBidReason_value, data, "BidResponse_NoBidReason")
	if err != nil {
		return err
	}
	*x = BidResponse_NoBidReason(value)
	return nil
}

// OpenRTB Native 7.1: Core layouts. An implementing exchange may not support
// all asset variants or introduce new ones unique to that system.
type NativeRequest_LayoutId int32

const (
	NativeRequest_CONTENT_WALL   NativeRequest_LayoutId = 1
	NativeRequest_APP_WALL       NativeRequest_LayoutId = 2
	NativeRequest_NEWS_FEED      NativeRequest_LayoutId = 3
	NativeRequest_CHAT_LIST      NativeRequest_LayoutId = 4
	NativeRequest_CAROUSEL       NativeRequest_LayoutId = 5
	NativeRequest_CONTENT_STREAM NativeRequest_LayoutId = 6
	NativeRequest_GRID           NativeRequest_LayoutId = 7
)

var NativeRequest_LayoutId_name = map[int32]string{
	1: "CONTENT_WALL",
	2: "APP_WALL",
	3: "NEWS_FEED",
	4: "CHAT_LIST",
	5: "CAROUSEL",
	6: "CONTENT_STREAM",
	7: "GRID",
}
var NativeRequest_LayoutId_value = map[string]int32{
	"CONTENT_WALL":   1,
	"APP_WALL":       2,
	"NEWS_FEED":      3,
	"CHAT_LIST":      4,
	"CAROUSEL":       5,
	"CONTENT_STREAM": 6,
	"GRID":           7,
}

func (x NativeRequest_LayoutId) Enum() *NativeRequest_LayoutId {
	p := new(NativeRequest_LayoutId)
	*p = x
	return p
}
func (x NativeRequest_LayoutId) String() string {
	return proto.EnumName(NativeRequest_LayoutId_name, int32(x))
}
func (x *NativeRequest_LayoutId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_LayoutId_value, data, "NativeRequest_LayoutId")
	if err != nil {
		return err
	}
	*x = NativeRequest_LayoutId(value)
	return nil
}

// OpenRTB Native 7.2: Below is a list of the core ad unit ids described by
// IAB: http://www.iab.net/media/file/IABNativeAdvertisingPlaybook120413.pdf.
// In feed unit is essentially a layout, it has been removed from the list.
// The in feed units can be identified via the layout parameter on the
// request. An implementing exchange may not support all asset variants or
// introduce new ones unique to that system.
type NativeRequest_AdUnitId int32

const (
	NativeRequest_PAID_SEARCH_UNIT      NativeRequest_AdUnitId = 1
	NativeRequest_RECOMMENDATION_WIDGET NativeRequest_AdUnitId = 2
	NativeRequest_PROMOTED_LISTING      NativeRequest_AdUnitId = 3
	NativeRequest_IAB_IN_AD_NATIVE      NativeRequest_AdUnitId = 4
	NativeRequest_CUSTOM                NativeRequest_AdUnitId = 5
)

var NativeRequest_AdUnitId_name = map[int32]string{
	1: "PAID_SEARCH_UNIT",
	2: "RECOMMENDATION_WIDGET",
	3: "PROMOTED_LISTING",
	4: "IAB_IN_AD_NATIVE",
	5: "CUSTOM",
}
var NativeRequest_AdUnitId_value = map[string]int32{
	"PAID_SEARCH_UNIT":      1,
	"RECOMMENDATION_WIDGET": 2,
	"PROMOTED_LISTING":      3,
	"IAB_IN_AD_NATIVE":      4,
	"CUSTOM":                5,
}

func (x NativeRequest_AdUnitId) Enum() *NativeRequest_AdUnitId {
	p := new(NativeRequest_AdUnitId)
	*p = x
	return p
}
func (x NativeRequest_AdUnitId) String() string {
	return proto.EnumName(NativeRequest_AdUnitId_name, int32(x))
}
func (x *NativeRequest_AdUnitId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_AdUnitId_value, data, "NativeRequest_AdUnitId")
	if err != nil {
		return err
	}
	*x = NativeRequest_AdUnitId(value)
	return nil
}

// OpenRTB Native 7.4: Common image asset element types of native
// advertising at the time of writing this spec. This list is
// non-exhaustive and intended to be extended by the buyers and sellers
// as the format evolves.
type NativeRequest_Asset_Image_ImageAssetType int32

const (
	// Icon image.
	NativeRequest_Asset_Image_ICON NativeRequest_Asset_Image_ImageAssetType = 1
	// Logo image for the brand/app.
	NativeRequest_Asset_Image_LOGO NativeRequest_Asset_Image_ImageAssetType = 2
	// Large image preview for the ad.
	NativeRequest_Asset_Image_MAIN NativeRequest_Asset_Image_ImageAssetType = 3
)

var NativeRequest_Asset_Image_ImageAssetType_name = map[int32]string{
	1: "ICON",
	2: "LOGO",
	3: "MAIN",
}
var NativeRequest_Asset_Image_ImageAssetType_value = map[string]int32{
	"ICON": 1,
	"LOGO": 2,
	"MAIN": 3,
}

func (x NativeRequest_Asset_Image_ImageAssetType) Enum() *NativeRequest_Asset_Image_ImageAssetType {
	p := new(NativeRequest_Asset_Image_ImageAssetType)
	*p = x
	return p
}
func (x NativeRequest_Asset_Image_ImageAssetType) String() string {
	return proto.EnumName(NativeRequest_Asset_Image_ImageAssetType_name, int32(x))
}
func (x *NativeRequest_Asset_Image_ImageAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_Asset_Image_ImageAssetType_value, data, "NativeRequest_Asset_Image_ImageAssetType")
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Image_ImageAssetType(value)
	return nil
}

// OpenRTB Native 7.3: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers
// and sellers as the format evolves. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type NativeRequest_Asset_Data_DataAssetType int32

const (
	// Sponsored By message where response should contain the brand name
	// of the sponsor.
	NativeRequest_Asset_Data_SPONSORED NativeRequest_Asset_Data_DataAssetType = 1
	// Descriptive text associated with the product or service being
	// advertised.
	NativeRequest_Asset_Data_DESC NativeRequest_Asset_Data_DataAssetType = 2
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	NativeRequest_Asset_Data_RATING NativeRequest_Asset_Data_DataAssetType = 3
	// Number of social ratings or "likes" of the product being offered
	// to the user.
	NativeRequest_Asset_Data_LIKES NativeRequest_Asset_Data_DataAssetType = 4
	// Number downloads/installs of this product.
	NativeRequest_Asset_Data_DOWNLOADS NativeRequest_Asset_Data_DataAssetType = 5
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	NativeRequest_Asset_Data_PRICE NativeRequest_Asset_Data_DataAssetType = 6
	// Sale price that can be used together with price to indicate a
	// discounted price compared to a regular price. Value should include
	// currency symbol in localised format.
	NativeRequest_Asset_Data_SALEPRICE NativeRequest_Asset_Data_DataAssetType = 7
	// Phone number.
	NativeRequest_Asset_Data_PHONE NativeRequest_Asset_Data_DataAssetType = 8
	// Address.
	NativeRequest_Asset_Data_ADDRESS NativeRequest_Asset_Data_DataAssetType = 9
	// Additional descriptive text associated with the product or service
	// being advertised.
	NativeRequest_Asset_Data_DESC2 NativeRequest_Asset_Data_DataAssetType = 10
	// Display URL for the text ad.
	NativeRequest_Asset_Data_DISPLAYURL NativeRequest_Asset_Data_DataAssetType = 11
	// Text describing a "call to action" button for the destination URL.
	NativeRequest_Asset_Data_CTATEXT NativeRequest_Asset_Data_DataAssetType = 12
)

var NativeRequest_Asset_Data_DataAssetType_name = map[int32]string{
	1:  "SPONSORED",
	2:  "DESC",
	3:  "RATING",
	4:  "LIKES",
	5:  "DOWNLOADS",
	6:  "PRICE",
	7:  "SALEPRICE",
	8:  "PHONE",
	9:  "ADDRESS",
	10: "DESC2",
	11: "DISPLAYURL",
	12: "CTATEXT",
}
var NativeRequest_Asset_Data_DataAssetType_value = map[string]int32{
	"SPONSORED":  1,
	"DESC":       2,
	"RATING":     3,
	"LIKES":      4,
	"DOWNLOADS":  5,
	"PRICE":      6,
	"SALEPRICE":  7,
	"PHONE":      8,
	"ADDRESS":    9,
	"DESC2":      10,
	"DISPLAYURL": 11,
	"CTATEXT":    12,
}

func (x NativeRequest_Asset_Data_DataAssetType) Enum() *NativeRequest_Asset_Data_DataAssetType {
	p := new(NativeRequest_Asset_Data_DataAssetType)
	*p = x
	return p
}
func (x NativeRequest_Asset_Data_DataAssetType) String() string {
	return proto.EnumName(NativeRequest_Asset_Data_DataAssetType_name, int32(x))
}
func (x *NativeRequest_Asset_Data_DataAssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NativeRequest_Asset_Data_DataAssetType_value, data, "NativeRequest_Asset_Data_DataAssetType")
	if err != nil {
		return err
	}
	*x = NativeRequest_Asset_Data_DataAssetType(value)
	return nil
}

// OpenRTB 3.2.1: The top-level bid request object contains a globally unique
// bid request or auction ID. This id attribute is required as is at least one
// impression object (Section 3.2.2). Other attributes in this top-level object
// establish rules and restrictions that apply to all impressions being offered.
//
// There are also several subordinate objects that provide detailed data to
// potential buyers. Among these are the Site and App objects, which describe
// the type of published media in which the impression(s) appear.
// These objects are highly recommended, but only one applies to a given
// bid request depending on whether the media is browser-based web content
// or a non-browser application, respectively.
type BidRequest struct {
	// Unique ID of the bid request, provided by the exchange.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of Imp objects (Section 3.2.2) representing the impressions offered.
	// At least 1 Imp object is required.
	Imp []*BidRequest_Imp `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	// Types that are valid to be assigned to DistributionchannelOneof:
	//	*BidRequest_Site_
	//	*BidRequest_App_
	DistributionchannelOneof isBidRequest_DistributionchannelOneof `protobuf_oneof:"distributionchannel_oneof"`
	// Details via a Device object (Section 3.2.11) about the user's
	// device to which the impression will be delivered.
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// A Regs object (Section 3.2.16) that specifies any industry, legal,
	// or governmental regulations in force for this request.
	Regs *BidRequest_Regs `protobuf:"bytes,14,opt,name=regs" json:"regs,omitempty"`
	// Details via a User object (Section 3.2.13) about the human
	// user of the device; the advertising audience.
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// Auction type, where 1 = First Price, 2 = Second Price Plus.
	// Exchange-specific auction types can be defined using values > 500.
	At *BidRequest_AuctionType `protobuf:"varint,7,opt,name=at,enum=zadx.BidRequest_AuctionType,def=2" json:"at,omitempty"`
	// Maximum time in milliseconds to submit a bid to avoid timeout.
	// This value is commonly communicated offline.
	Tmax *int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	// Whitelist of buyer seats allowed to bid on this impression.
	// Seat IDs must be communicated between bidders and the exchange a priori.
	// Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat" json:"wseat,omitempty"`
	// Flag to indicate if Exchange can verify that the impressions offered
	// represent all of the impressions available in context (e.g., all on the
	// web page, all video spots such as pre/mid/post roll) to support
	// road-blocking. 0 = no or unknown, 1 = yes, the impressions offered
	// represent all that are available.
	Allimps *bool `protobuf:"varint,10,opt,name=allimps,def=0" json:"allimps,omitempty"`
	// Array of allowed currencies for bids on this bid request using ISO-4217
	// alpha codes. Recommended only if the exchange accepts multiple currencies.
	Cur []string `protobuf:"bytes,11,rep,name=cur" json:"cur,omitempty"`
	// Blocked advertiser categories using the IAB content categories.
	// See enum ContentCategory.
	Bcat []string `protobuf:"bytes,12,rep,name=bcat" json:"bcat,omitempty"`
	// Block list of advertisers by their domains (e.g., "ford.com").
	Badv []string `protobuf:"bytes,13,rep,name=badv" json:"badv,omitempty"`
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	Test             *bool                     `protobuf:"varint,15,opt,name=test,def=0" json:"test,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest) Reset()         { *m = BidRequest{} }
func (m *BidRequest) String() string { return proto.CompactTextString(m) }
func (*BidRequest) ProtoMessage()    {}

var extRange_BidRequest = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest
}
func (m *BidRequest) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_BidRequest_At BidRequest_AuctionType = BidRequest_SECOND_PRICE
const Default_BidRequest_Allimps bool = false
const Default_BidRequest_Test bool = false

type isBidRequest_DistributionchannelOneof interface{ isBidRequest_DistributionchannelOneof() }

type BidRequest_Site_ struct {
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site,oneof"`
}
type BidRequest_App_ struct {
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app,oneof"`
}

func (*BidRequest_Site_) isBidRequest_DistributionchannelOneof() {}
func (*BidRequest_App_) isBidRequest_DistributionchannelOneof()  {}

func (m *BidRequest) GetDistributionchannelOneof() isBidRequest_DistributionchannelOneof {
	if m != nil {
		return m.DistributionchannelOneof
	}
	return nil
}

func (m *BidRequest) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest) GetImp() []*BidRequest_Imp {
	if m != nil {
		return m.Imp
	}
	return nil
}

func (m *BidRequest) GetSite() *BidRequest_Site {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_Site_); ok {
		return x.Site
	}
	return nil
}

func (m *BidRequest) GetApp() *BidRequest_App {
	if x, ok := m.GetDistributionchannelOneof().(*BidRequest_App_); ok {
		return x.App
	}
	return nil
}

func (m *BidRequest) GetDevice() *BidRequest_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *BidRequest) GetRegs() *BidRequest_Regs {
	if m != nil {
		return m.Regs
	}
	return nil
}

func (m *BidRequest) GetUser() *BidRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *BidRequest) GetAt() BidRequest_AuctionType {
	if m != nil && m.At != nil {
		return *m.At
	}
	return Default_BidRequest_At
}

func (m *BidRequest) GetTmax() int32 {
	if m != nil && m.Tmax != nil {
		return *m.Tmax
	}
	return 0
}

func (m *BidRequest) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest) GetAllimps() bool {
	if m != nil && m.Allimps != nil {
		return *m.Allimps
	}
	return Default_BidRequest_Allimps
}

func (m *BidRequest) GetCur() []string {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *BidRequest) GetBcat() []string {
	if m != nil {
		return m.Bcat
	}
	return nil
}

func (m *BidRequest) GetBadv() []string {
	if m != nil {
		return m.Badv
	}
	return nil
}

func (m *BidRequest) GetTest() bool {
	if m != nil && m.Test != nil {
		return *m.Test
	}
	return Default_BidRequest_Test
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _BidRequest_OneofMarshaler, _BidRequest_OneofUnmarshaler, []interface{}{
		(*BidRequest_Site_)(nil),
		(*BidRequest_App_)(nil),
	}
}

func _BidRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidRequest)
	// distributionchannel_oneof
	switch x := m.DistributionchannelOneof.(type) {
	case *BidRequest_Site_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Site); err != nil {
			return err
		}
	case *BidRequest_App_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.App); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidRequest.DistributionchannelOneof has unexpected type %T", x)
	}
	return nil
}

func _BidRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidRequest)
	switch tag {
	case 3: // distributionchannel_oneof.site
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_Site)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_Site_{msg}
		return true, err
	case 4: // distributionchannel_oneof.app
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_App)
		err := b.DecodeMessage(msg)
		m.DistributionchannelOneof = &BidRequest_App_{msg}
		return true, err
	default:
		return false, nil
	}
}

// OpenRTB 3.2.2: This object describes an ad placement or impression
// being auctioned.  A single bid request can include multiple Imp objects,
// a use case for which might be an exchange that supports selling all
// ad positions on a given page.  Each Imp object has a required ID so that
// bids can reference them individually.
//
// The presence of Banner (Section 3.2.3), Video (Section 3.2.4),
// and/or Native (Section 3.2.5) objects subordinate to the Imp object
// indicates the type of impression being offered. The publisher can choose
// one such type which is the typical case or mix them at their discretion.
// Any given bid for the impression must conform to one of the offered types.
type BidRequest_Imp struct {
	// A unique identifier for this impression within the context of the bid
	// request (typically, value starts with 1, and increments up to n
	// for n impressions).
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// A Banner object (Section 3.2.3); required if this impression is
	// offered as a banner ad opportunity.
	Banner *BidRequest_Imp_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	// A Video object (Section 3.2.4); required if this impression is
	// offered as a video ad opportunity.
	Video *BidRequest_Imp_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanager *string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	// Version of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanagerver *string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	// 1 = the ad is interstitial or full screen, 0 = not interstitial.
	Instl *bool `protobuf:"varint,6,opt,name=instl" json:"instl,omitempty"`
	// Identifier for specific ad placement or ad tag that was used to
	// initiate the auction. This can be useful for debugging of any issues,
	// or for optimization by the buyer.
	Tagid *string `protobuf:"bytes,7,opt,name=tagid" json:"tagid,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor *float64 `protobuf:"fixed64,8,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed by the exchange.
	Bidfloorcur *string `protobuf:"bytes,9,opt,name=bidfloorcur,def=CNY" json:"bidfloorcur,omitempty"`
	// Flag to indicate if the impression requires secure HTTPS URL creative
	// assets and markup, where 0 = non-secure, 1 = secure.  If omitted,
	// the secure state is unknown, but non-secure HTTP support can be assumed.
	Secure *bool `protobuf:"varint,12,opt,name=secure" json:"secure,omitempty"`
	// Array of exchange-specific names of supported iframe busters.
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster" json:"iframebuster,omitempty"`
	// A Pmp object (Section 3.2.17) containing any private marketplace deals
	// in effect for this impression.
	Pmp *BidRequest_Imp_Pmp `protobuf:"bytes,11,opt,name=pmp" json:"pmp,omitempty"`
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	Native           *BidRequest_Imp_Native    `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Imp) Reset()         { *m = BidRequest_Imp{} }
func (m *BidRequest_Imp) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp) ProtoMessage()    {}

var extRange_BidRequest_Imp = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp
}
func (m *BidRequest_Imp) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_BidRequest_Imp_Bidfloor float64 = 0
const Default_BidRequest_Imp_Bidfloorcur string = "CNY"

func (m *BidRequest_Imp) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp) GetBanner() *BidRequest_Imp_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *BidRequest_Imp) GetVideo() *BidRequest_Imp_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *BidRequest_Imp) GetDisplaymanager() string {
	if m != nil && m.Displaymanager != nil {
		return *m.Displaymanager
	}
	return ""
}

func (m *BidRequest_Imp) GetDisplaymanagerver() string {
	if m != nil && m.Displaymanagerver != nil {
		return *m.Displaymanagerver
	}
	return ""
}

func (m *BidRequest_Imp) GetInstl() bool {
	if m != nil && m.Instl != nil {
		return *m.Instl
	}
	return false
}

func (m *BidRequest_Imp) GetTagid() string {
	if m != nil && m.Tagid != nil {
		return *m.Tagid
	}
	return ""
}

func (m *BidRequest_Imp) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Imp_Bidfloor
}

func (m *BidRequest_Imp) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Imp_Bidfloorcur
}

func (m *BidRequest_Imp) GetSecure() bool {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return false
}

func (m *BidRequest_Imp) GetIframebuster() []string {
	if m != nil {
		return m.Iframebuster
	}
	return nil
}

func (m *BidRequest_Imp) GetPmp() *BidRequest_Imp_Pmp {
	if m != nil {
		return m.Pmp
	}
	return nil
}

func (m *BidRequest_Imp) GetNative() *BidRequest_Imp_Native {
	if m != nil {
		return m.Native
	}
	return nil
}

// OpenRTB 3.2.3: This object represents the most general type of
// impression.  Although the term "banner" may have very specific meaning
// in other contexts, here it can be many things including a simple static
// image, an expandable ad unit, or even in-banner video (refer to the Video
// object in Section 3.2.4 for the more generalized and full featured video
// ad units). An array of Banner objects can also appear within the Video
// to describe optional companion ads defined in the VAST specification.
//
// The presence of a Banner as a subordinate of the Imp object indicates
// that this impression is offered as a banner type impression.
// At the publisher's discretion, that same impression may also be offered
// as video and/or native by also including as Imp subordinates the Video
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Banner struct {
	// Width of the impression in pixels.
	// If neither wmin nor wmax are specified, this value is an exact
	// width requirement. Otherwise it is a preferred width.
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height of the impression in pixels.
	// If neither hmin nor hmax are specified, this value is an exact
	// height requirement. Otherwise it is a preferred height.
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Maximum width of the impression in pixels.
	// If included along with a w value then w should be interpreted
	// as a recommended or preferred width.
	Wmax *int32 `protobuf:"varint,11,opt,name=wmax" json:"wmax,omitempty"`
	// Maximum height of the impression in pixels.
	// If included along with an h value then h should be interpreted
	// as a recommended or preferred height.
	Hmax *int32 `protobuf:"varint,12,opt,name=hmax" json:"hmax,omitempty"`
	// Minimum width of the impression in pixels.
	// If included along with a w value then w should be interpreted
	// as a recommended or preferred width.
	Wmin *int32 `protobuf:"varint,13,opt,name=wmin" json:"wmin,omitempty"`
	// Minimum height of the impression in pixels.
	// If included along with an h value then h should be interpreted
	// as a recommended or preferred height.
	Hmin *int32 `protobuf:"varint,14,opt,name=hmin" json:"hmin,omitempty"`
	// Unique identifier for this banner object. Recommended when Banner
	// objects are used with a Video object (Section 3.2.4) to represent
	// an array of companion ads. Values usually start at 1 and increase
	// with each object; should be unique within an impression.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// Ad position on screen.
	Pos *BidRequest_Imp_AdPosition `protobuf:"varint,4,opt,name=pos,enum=zadx.BidRequest_Imp_AdPosition" json:"pos,omitempty"`
	// Blocked banner ad types.
	Btype []BidRequest_Imp_Banner_BannerAdType `protobuf:"varint,5,rep,packed,name=btype,enum=zadx.BidRequest_Imp_Banner_BannerAdType" json:"btype,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,6,rep,packed,name=battr,enum=zadx.CreativeAttribute" json:"battr,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	Mimes []string `protobuf:"bytes,7,rep,name=mimes" json:"mimes,omitempty"`
	// Specify if the banner is delivered in the top frame (true)
	// or in an iframe (false).
	Topframe *bool `protobuf:"varint,8,opt,name=topframe" json:"topframe,omitempty"`
	// Directions in which the banner may expand.
	Expdir []BidRequest_Imp_Banner_ExpandableDirection `protobuf:"varint,9,rep,packed,name=expdir,enum=zadx.BidRequest_Imp_Banner_ExpandableDirection" json:"expdir,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api              []BidRequest_Imp_APIFramework `protobuf:"varint,10,rep,packed,name=api,enum=zadx.BidRequest_Imp_APIFramework" json:"api,omitempty"`
	XXX_extensions   map[int32]proto.Extension     `json:"-"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *BidRequest_Imp_Banner) Reset()         { *m = BidRequest_Imp_Banner{} }
func (m *BidRequest_Imp_Banner) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Banner) ProtoMessage()    {}

var extRange_BidRequest_Imp_Banner = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Banner) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Banner
}
func (m *BidRequest_Imp_Banner) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Imp_Banner) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetWmax() int32 {
	if m != nil && m.Wmax != nil {
		return *m.Wmax
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetHmax() int32 {
	if m != nil && m.Hmax != nil {
		return *m.Hmax
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *BidRequest_Imp_Banner) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp_Banner) GetPos() BidRequest_Imp_AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return BidRequest_Imp_UNKNOWN
}

func (m *BidRequest_Imp_Banner) GetBtype() []BidRequest_Imp_Banner_BannerAdType {
	if m != nil {
		return m.Btype
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetTopframe() bool {
	if m != nil && m.Topframe != nil {
		return *m.Topframe
	}
	return false
}

func (m *BidRequest_Imp_Banner) GetExpdir() []BidRequest_Imp_Banner_ExpandableDirection {
	if m != nil {
		return m.Expdir
	}
	return nil
}

func (m *BidRequest_Imp_Banner) GetApi() []BidRequest_Imp_APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

// OpenRTB 3.2.4: This object represents an in-stream video impression.
// Many of the fields are non-essential for minimally viable transactions,
// but are included to offer fine control when needed. Video in OpenRTB
// generally assumes compliance with the VAST standard. As such, the notion
// of companion ads is supported by optionally including an array of Banner
// objects (refer to the Banner object in Section 3.2.3) that define these
// companion ads.
//
// The presence of a Video as a subordinate of the Imp object indicates
// that this impression is offered as a video type impression. At the
// publisher's discretion, that same impression may also be offered as
// banner and/or native by also including as Imp subordinates the Banner
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Video struct {
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Indicates if the impression must be linear, nonlinear, etc.
	// If none specified, assume all are allowed.
	Linearity *BidRequest_Imp_Video_VideoLinearity `protobuf:"varint,2,opt,name=linearity,enum=zadx.BidRequest_Imp_Video_VideoLinearity" json:"linearity,omitempty"`
	// Minimum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration *int32 `protobuf:"varint,3,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration *int32 `protobuf:"varint,4,opt,name=maxduration" json:"maxduration,omitempty"`
	// Deprecated; use protocols.
	Protocol *BidRequest_Imp_Video_VideoBidResponseProtocol `protobuf:"varint,5,opt,name=protocol,enum=zadx.BidRequest_Imp_Video_VideoBidResponseProtocol" json:"protocol,omitempty"`
	// Array of supported video bid response protocols.
	// At least one supported protocol must be specified.
	Protocols []BidRequest_Imp_Video_VideoBidResponseProtocol `protobuf:"varint,21,rep,packed,name=protocols,enum=zadx.BidRequest_Imp_Video_VideoBidResponseProtocol" json:"protocols,omitempty"`
	// Width of the player in pixels.
	// RECOMMENDED by the OpenRTB specification.
	W *int32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	// Height of the player in pixels.
	// RECOMMENDED by the OpenRTB specification.
	H *int32 `protobuf:"varint,7,opt,name=h" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements. Refer to enum VideoStartDelay for generic
	// values. This field is not required, but it's highly recommended.
	Startdelay *int32 `protobuf:"varint,8,opt,name=startdelay" json:"startdelay,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence *int32 `protobuf:"varint,9,opt,name=sequence,def=1" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,10,rep,packed,name=battr,enum=zadx.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended *int32 `protobuf:"varint,11,opt,name=maxextended" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Minbitrate *int32 `protobuf:"varint,12,opt,name=minbitrate" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps. Exchange may set this dynamically,
	// or universally across their set of publishers.
	Maxbitrate *int32 `protobuf:"varint,13,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	// Indicates if letter-boxing of 4:3 content into a 16:9 window is
	// allowed, where 0 = no, 1 = yes.
	Boxingallowed *bool `protobuf:"varint,14,opt,name=boxingallowed,def=1" json:"boxingallowed,omitempty"`
	// Allowed playback methods. If none specified, assume all are allowed.
	Playbackmethod []BidRequest_Imp_Video_VideoPlaybackMethod `protobuf:"varint,15,rep,packed,name=playbackmethod,enum=zadx.BidRequest_Imp_Video_VideoPlaybackMethod" json:"playbackmethod,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []BidRequest_Imp_Video_ContentDeliveryMethod `protobuf:"varint,16,rep,packed,name=delivery,enum=zadx.BidRequest_Imp_Video_ContentDeliveryMethod" json:"delivery,omitempty"`
	// Ad position on screen.
	Pos *BidRequest_Imp_AdPosition `protobuf:"varint,17,opt,name=pos,enum=zadx.BidRequest_Imp_AdPosition" json:"pos,omitempty"`
	// Array of Banner objects (Section 3.2.3) if companion ads are available.
	Companionad []*BidRequest_Imp_Banner `protobuf:"bytes,18,rep,name=companionad" json:"companionad,omitempty"`
	// Companion ads in OpenRTB 2.1 format. (Or to be precise, interpretations
	// based on the buggy sample message in 5.1.4, fixed later in 2.2.)
	Companionad_21 *BidRequest_Imp_Video_CompanionAd `protobuf:"bytes,22,opt,name=companionad_21" json:"companionad_21,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []BidRequest_Imp_APIFramework `protobuf:"varint,19,rep,packed,name=api,enum=zadx.BidRequest_Imp_APIFramework" json:"api,omitempty"`
	// Supported VAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype    []BidRequest_Imp_Video_VASTCompanionType `protobuf:"varint,20,rep,packed,name=companiontype,enum=zadx.BidRequest_Imp_Video_VASTCompanionType" json:"companiontype,omitempty"`
	XXX_extensions   map[int32]proto.Extension                `json:"-"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *BidRequest_Imp_Video) Reset()         { *m = BidRequest_Imp_Video{} }
func (m *BidRequest_Imp_Video) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Video) ProtoMessage()    {}

var extRange_BidRequest_Imp_Video = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Video) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Video
}
func (m *BidRequest_Imp_Video) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_BidRequest_Imp_Video_Sequence int32 = 1
const Default_BidRequest_Imp_Video_Boxingallowed bool = true

func (m *BidRequest_Imp_Video) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetLinearity() BidRequest_Imp_Video_VideoLinearity {
	if m != nil && m.Linearity != nil {
		return *m.Linearity
	}
	return BidRequest_Imp_Video_LINEAR
}

func (m *BidRequest_Imp_Video) GetMinduration() int32 {
	if m != nil && m.Minduration != nil {
		return *m.Minduration
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMaxduration() int32 {
	if m != nil && m.Maxduration != nil {
		return *m.Maxduration
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetProtocol() BidRequest_Imp_Video_VideoBidResponseProtocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return BidRequest_Imp_Video_VAST_1_0
}

func (m *BidRequest_Imp_Video) GetProtocols() []BidRequest_Imp_Video_VideoBidResponseProtocol {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetStartdelay() int32 {
	if m != nil && m.Startdelay != nil {
		return *m.Startdelay
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetSequence() int32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return Default_BidRequest_Imp_Video_Sequence
}

func (m *BidRequest_Imp_Video) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetMaxextended() int32 {
	if m != nil && m.Maxextended != nil {
		return *m.Maxextended
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMinbitrate() int32 {
	if m != nil && m.Minbitrate != nil {
		return *m.Minbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetMaxbitrate() int32 {
	if m != nil && m.Maxbitrate != nil {
		return *m.Maxbitrate
	}
	return 0
}

func (m *BidRequest_Imp_Video) GetBoxingallowed() bool {
	if m != nil && m.Boxingallowed != nil {
		return *m.Boxingallowed
	}
	return Default_BidRequest_Imp_Video_Boxingallowed
}

func (m *BidRequest_Imp_Video) GetPlaybackmethod() []BidRequest_Imp_Video_VideoPlaybackMethod {
	if m != nil {
		return m.Playbackmethod
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetDelivery() []BidRequest_Imp_Video_ContentDeliveryMethod {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetPos() BidRequest_Imp_AdPosition {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return BidRequest_Imp_UNKNOWN
}

func (m *BidRequest_Imp_Video) GetCompanionad() []*BidRequest_Imp_Banner {
	if m != nil {
		return m.Companionad
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetCompanionad_21() *BidRequest_Imp_Video_CompanionAd {
	if m != nil {
		return m.Companionad_21
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetApi() []BidRequest_Imp_APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Imp_Video) GetCompaniontype() []BidRequest_Imp_Video_VASTCompanionType {
	if m != nil {
		return m.Companiontype
	}
	return nil
}

// OpenRTB 2.1 compatibility.
type BidRequest_Imp_Video_CompanionAd struct {
	Banner           []*BidRequest_Imp_Banner  `protobuf:"bytes,1,rep,name=banner" json:"banner,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Imp_Video_CompanionAd) Reset()         { *m = BidRequest_Imp_Video_CompanionAd{} }
func (m *BidRequest_Imp_Video_CompanionAd) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Video_CompanionAd) ProtoMessage()    {}

var extRange_BidRequest_Imp_Video_CompanionAd = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Video_CompanionAd) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Video_CompanionAd
}
func (m *BidRequest_Imp_Video_CompanionAd) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Imp_Video_CompanionAd) GetBanner() []*BidRequest_Imp_Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

// OpenRTB 3.2.5: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding
// content (e.g., a sponsored Twitter or Facebook post). As such, the
// response must be well-structured to afford the publisher fine-grained
// control over rendering.
//
// The Native Subcommittee has developed a companion specification to
// OpenRTB called the Native Ad Specification. It defines the request
// parameters and response markup structure of native ad units.
// This object provides the means of transporting request parameters as an
// opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the
// ad markup served will be structured according to that specification.
//
// The presence of a Native as a subordinate of the Imp object indicates
// that this impression is offered as a native type impression.
// At the publisher's discretion, that same impression may also be offered
// as banner and/or video by also including as Imp subordinates the Banner
// and/or Video objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Native struct {
	// Types that are valid to be assigned to RequestOneof:
	//	*BidRequest_Imp_Native_Request
	//	*BidRequest_Imp_Native_RequestNative
	RequestOneof isBidRequest_Imp_Native_RequestOneof `protobuf_oneof:"request_oneof"`
	// Version of the Native Ad Specification to which request complies;
	// highly recommended for efficient parsing.
	Ver *string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []BidRequest_Imp_APIFramework `protobuf:"varint,3,rep,packed,name=api,enum=zadx.BidRequest_Imp_APIFramework" json:"api,omitempty"`
	// Blocked creative attributes.
	Battr            []CreativeAttribute       `protobuf:"varint,4,rep,packed,name=battr,enum=zadx.CreativeAttribute" json:"battr,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Imp_Native) Reset()         { *m = BidRequest_Imp_Native{} }
func (m *BidRequest_Imp_Native) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Native) ProtoMessage()    {}

var extRange_BidRequest_Imp_Native = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Native) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Native
}
func (m *BidRequest_Imp_Native) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

type isBidRequest_Imp_Native_RequestOneof interface{ isBidRequest_Imp_Native_RequestOneof() }

type BidRequest_Imp_Native_Request struct {
	Request string `protobuf:"bytes,1,opt,name=request,oneof"`
}
type BidRequest_Imp_Native_RequestNative struct {
	RequestNative *NativeRequest `protobuf:"bytes,50,opt,name=request_native,oneof"`
}

func (*BidRequest_Imp_Native_Request) isBidRequest_Imp_Native_RequestOneof()       {}
func (*BidRequest_Imp_Native_RequestNative) isBidRequest_Imp_Native_RequestOneof() {}

func (m *BidRequest_Imp_Native) GetRequestOneof() isBidRequest_Imp_Native_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetRequest() string {
	if x, ok := m.GetRequestOneof().(*BidRequest_Imp_Native_Request); ok {
		return x.Request
	}
	return ""
}

func (m *BidRequest_Imp_Native) GetRequestNative() *NativeRequest {
	if x, ok := m.GetRequestOneof().(*BidRequest_Imp_Native_RequestNative); ok {
		return x.RequestNative
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_Imp_Native) GetApi() []BidRequest_Imp_APIFramework {
	if m != nil {
		return m.Api
	}
	return nil
}

func (m *BidRequest_Imp_Native) GetBattr() []CreativeAttribute {
	if m != nil {
		return m.Battr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidRequest_Imp_Native) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _BidRequest_Imp_Native_OneofMarshaler, _BidRequest_Imp_Native_OneofUnmarshaler, []interface{}{
		(*BidRequest_Imp_Native_Request)(nil),
		(*BidRequest_Imp_Native_RequestNative)(nil),
	}
}

func _BidRequest_Imp_Native_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidRequest_Imp_Native)
	// request_oneof
	switch x := m.RequestOneof.(type) {
	case *BidRequest_Imp_Native_Request:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Request)
	case *BidRequest_Imp_Native_RequestNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidRequest_Imp_Native.RequestOneof has unexpected type %T", x)
	}
	return nil
}

func _BidRequest_Imp_Native_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidRequest_Imp_Native)
	switch tag {
	case 1: // request_oneof.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RequestOneof = &BidRequest_Imp_Native_Request{x}
		return true, err
	case 50: // request_oneof.request_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest)
		err := b.DecodeMessage(msg)
		m.RequestOneof = &BidRequest_Imp_Native_RequestNative{msg}
		return true, err
	default:
		return false, nil
	}
}

// OpenRTB 3.2.17: This object is the private marketplace container for
// direct deals between buyers and sellers that may pertain to this
// impression. The actual deals are represented as a collection of
// Deal objects. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp struct {
	// Indicator of auction eligibility to seats named in the Direct Deals
	// object, where 0 = all bids are accepted, 1 = bids are restricted to
	// the deals specified and the terms thereof.
	PrivateAuction *bool `protobuf:"varint,1,opt,name=private_auction" json:"private_auction,omitempty"`
	// Array of Deal (Section 3.2.18) objects that convey the specific deals
	// applicable to this impression.
	Deals            []*BidRequest_Imp_Pmp_Deal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
	XXX_extensions   map[int32]proto.Extension  `json:"-"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *BidRequest_Imp_Pmp) Reset()         { *m = BidRequest_Imp_Pmp{} }
func (m *BidRequest_Imp_Pmp) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Pmp) ProtoMessage()    {}

var extRange_BidRequest_Imp_Pmp = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Pmp) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Pmp
}
func (m *BidRequest_Imp_Pmp) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Imp_Pmp) GetPrivateAuction() bool {
	if m != nil && m.PrivateAuction != nil {
		return *m.PrivateAuction
	}
	return false
}

func (m *BidRequest_Imp_Pmp) GetDeals() []*BidRequest_Imp_Pmp_Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

// OpenRTB 3.2.18: This object constitutes a specific deal that was struck
// a priori between a buyer and a seller. Its presence with the Pmp
// collection indicates that this impression is available under the terms
// of that deal. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp_Deal struct {
	// A unique identifier for the direct deal.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor *float64 `protobuf:"fixed64,2,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed
	// by the exchange.
	Bidfloorcur *string `protobuf:"bytes,3,opt,name=bidfloorcur,def=CNY" json:"bidfloorcur,omitempty"`
	// Whitelist of buyer seats allowed to bid on this deal. Seat IDs must
	// be communicated between bidders and the exchange a priori.
	// Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat" json:"wseat,omitempty"`
	// Array of advertiser domains (e.g., advertiser.com) allowed to
	// bid on this deal. Omission implies no advertiser restrictions.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain" json:"wadomain,omitempty"`
	// Optional override of the overall auction type of the bid request,
	// where 1 = First Price, 2 = Second Price Plus, 3 = the value passed
	// in bidfloor is the agreed upon deal price. Additional auction types
	// can be defined by the exchange.
	At               *BidRequest_AuctionType   `protobuf:"varint,6,opt,name=at,enum=zadx.BidRequest_AuctionType" json:"at,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Imp_Pmp_Deal) Reset()         { *m = BidRequest_Imp_Pmp_Deal{} }
func (m *BidRequest_Imp_Pmp_Deal) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Imp_Pmp_Deal) ProtoMessage()    {}

var extRange_BidRequest_Imp_Pmp_Deal = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Imp_Pmp_Deal) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Imp_Pmp_Deal
}
func (m *BidRequest_Imp_Pmp_Deal) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_BidRequest_Imp_Pmp_Deal_Bidfloor float64 = 0
const Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur string = "CNY"

func (m *BidRequest_Imp_Pmp_Deal) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Imp_Pmp_Deal) GetBidfloor() float64 {
	if m != nil && m.Bidfloor != nil {
		return *m.Bidfloor
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloor
}

func (m *BidRequest_Imp_Pmp_Deal) GetBidfloorcur() string {
	if m != nil && m.Bidfloorcur != nil {
		return *m.Bidfloorcur
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur
}

func (m *BidRequest_Imp_Pmp_Deal) GetWseat() []string {
	if m != nil {
		return m.Wseat
	}
	return nil
}

func (m *BidRequest_Imp_Pmp_Deal) GetWadomain() []string {
	if m != nil {
		return m.Wadomain
	}
	return nil
}

func (m *BidRequest_Imp_Pmp_Deal) GetAt() BidRequest_AuctionType {
	if m != nil && m.At != nil {
		return *m.At
	}
	return BidRequest_FIRST_PRICE
}

// OpenRTB 3.2.6: This object should be included if the ad supported content
// is a website as opposed to a non-browser application. A bid request must
// not contain both a Site and an App object. At a minimum, it is useful to
// provide a site ID or page URL, but this is not strictly required.
type BidRequest_Site struct {
	// Site ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Site name (may be masked at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the site, used for advertiser side blocking.
	// For example, "foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the site.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the site. See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the site. See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// URL of the page where the impression will be shown.
	Page *string `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
	// Indicates if the site has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,8,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// Referrer URL that caused navigation to the current page.
	Ref *string `protobuf:"bytes,9,opt,name=ref" json:"ref,omitempty"`
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,10,opt,name=search" json:"search,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the site.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the site.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about this site.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// Mobile-optimized signal, where 0 = no, 1 = yes.
	Mobile           *bool                     `protobuf:"varint,15,opt,name=mobile" json:"mobile,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Site) Reset()         { *m = BidRequest_Site{} }
func (m *BidRequest_Site) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Site) ProtoMessage()    {}

var extRange_BidRequest_Site = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Site) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Site
}
func (m *BidRequest_Site) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Site) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Site) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Site) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_Site) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Site) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_Site) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_Site) GetPage() string {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return ""
}

func (m *BidRequest_Site) GetPrivacypolicy() bool {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return false
}

func (m *BidRequest_Site) GetRef() string {
	if m != nil && m.Ref != nil {
		return *m.Ref
	}
	return ""
}

func (m *BidRequest_Site) GetSearch() string {
	if m != nil && m.Search != nil {
		return *m.Search
	}
	return ""
}

func (m *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_Site) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_Site) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Site) GetMobile() bool {
	if m != nil && m.Mobile != nil {
		return *m.Mobile
	}
	return false
}

// OpenRTB 3.2.7: This object should be included if the ad supported content
// is a non-browser application (typically in mobile) as opposed to a website.
// A bid request must not contain both an App and a Site object.
// At a minimum, it is useful to provide an App ID or bundle,
// but this is not strictly required.
type BidRequest_App struct {
	// Application ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Application name (may be aliased at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the application. For example, "mygame.foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the app.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the app. See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the app. See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// Application version.
	Ver *string `protobuf:"bytes,7,opt,name=ver" json:"ver,omitempty"`
	// Application bundle or package name (e.g., com.foo.mygame).
	// This is intended to be a unique ID across multiple exchanges.
	Bundle *string `protobuf:"bytes,8,opt,name=bundle" json:"bundle,omitempty"`
	// Indicates if the app has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,9,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// 0 = app is free, 1 = the app is a paid version.
	Paid *bool `protobuf:"varint,10,opt,name=paid" json:"paid,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the app.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the app.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about the app.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// App store URL for an installed app; for QAG 1.5 compliance.
	Storeurl         *string                   `protobuf:"bytes,16,opt,name=storeurl" json:"storeurl,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_App) Reset()         { *m = BidRequest_App{} }
func (m *BidRequest_App) String() string { return proto.CompactTextString(m) }
func (*BidRequest_App) ProtoMessage()    {}

var extRange_BidRequest_App = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_App) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_App
}
func (m *BidRequest_App) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_App) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_App) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_App) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *BidRequest_App) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_App) GetSectioncat() []string {
	if m != nil {
		return m.Sectioncat
	}
	return nil
}

func (m *BidRequest_App) GetPagecat() []string {
	if m != nil {
		return m.Pagecat
	}
	return nil
}

func (m *BidRequest_App) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *BidRequest_App) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return ""
}

func (m *BidRequest_App) GetPrivacypolicy() bool {
	if m != nil && m.Privacypolicy != nil {
		return *m.Privacypolicy
	}
	return false
}

func (m *BidRequest_App) GetPaid() bool {
	if m != nil && m.Paid != nil {
		return *m.Paid
	}
	return false
}

func (m *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *BidRequest_App) GetContent() *BidRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *BidRequest_App) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_App) GetStoreurl() string {
	if m != nil && m.Storeurl != nil {
		return *m.Storeurl
	}
	return ""
}

// OpenRTB 3.2.8: This object describes the publisher of the media in which
// the ad will be displayed. The publisher is typically the seller
// in an OpenRTB transaction.
type BidRequest_Publisher struct {
	// Exchange-specific publisher ID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Publisher name (may be aliased at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the publisher.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the publisher (e.g., "publisher.com").
	Domain           *string                   `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Publisher) Reset()         { *m = BidRequest_Publisher{} }
func (m *BidRequest_Publisher) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Publisher) ProtoMessage()    {}

var extRange_BidRequest_Publisher = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Publisher) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Publisher
}
func (m *BidRequest_Publisher) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Publisher) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Publisher) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Publisher) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Publisher) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

// OpenRTB 3.2.9: This object describes the content in which the impression
// will appear, which may be syndicated or non-syndicated content.
// This object may be useful when syndicated content contains impressions and
// does not necessarily match the publisher's general content.
// The exchange might or might not have knowledge of the page where the
// content is running, as a result of the syndication method.
// For example might be a video impression embedded in an iframe on an
// unknown web property or device.
type BidRequest_Content struct {
	// ID uniquely identifying the content.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content episode number (typically applies to video content).
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	// Content title.
	// Video Examples: "Search Committee" (television), "A New Hope" (movie),
	// or "Endgame" (made for web).
	// Non-Video Example: "Why an Antarctic Glacier Is Melting So Quickly"
	// (Time magazine article).
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// Content series.
	// Video Examples: "The Office" (television), "Star Wars" (movie),
	// or "Arby 'N' The Chief" (made for web).
	// Non-Video Example: "Ecocentric" (Time Magazine blog).
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	// Content season; typically for video content (e.g., "Season 3").
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	// URL of the content, for buy-side contextualization or review.
	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	// Array of IAB content categories that describe the content.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,7,rep,name=cat" json:"cat,omitempty"`
	// Video quality per IAB's classification.
	Videoquality *BidRequest_Content_VideoQuality `protobuf:"varint,8,opt,name=videoquality,enum=zadx.BidRequest_Content_VideoQuality" json:"videoquality,omitempty"`
	// Comma separated list of keywords describing the content.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,9,opt,name=keywords" json:"keywords,omitempty"`
	// Content rating (e.g., MPAA).
	Contentrating *string `protobuf:"bytes,10,opt,name=contentrating" json:"contentrating,omitempty"`
	// User rating of the content (e.g., number of stars, likes, etc.).
	Userrating *string `protobuf:"bytes,11,opt,name=userrating" json:"userrating,omitempty"`
	// Type of content (game, video, text, etc.).
	Context *BidRequest_Content_ContentContext `protobuf:"varint,20,opt,name=context,enum=zadx.BidRequest_Content_ContentContext" json:"context,omitempty"`
	// OpenRTB <= 2.2 compatibility; use context for 2.3+.
	Context_22 *string `protobuf:"bytes,12,opt,name=context_22" json:"context_22,omitempty"`
	// 0 = not live, 1 = content is live (e.g., stream, live blog).
	Livestream *bool `protobuf:"varint,13,opt,name=livestream" json:"livestream,omitempty"`
	// 0 = indirect, 1 = direct.
	Sourcerelationship *bool `protobuf:"varint,14,opt,name=sourcerelationship" json:"sourcerelationship,omitempty"`
	// Details about the content Producer (Section 3.2.10).
	Producer *BidRequest_Producer `protobuf:"bytes,15,opt,name=producer" json:"producer,omitempty"`
	// Length of content in seconds; appropriate for video or audio.
	Len *int32 `protobuf:"varint,16,opt,name=len" json:"len,omitempty"`
	// Media rating per QAG guidelines.
	Qagmediarating *BidRequest_Content_QAGMediaRating `protobuf:"varint,17,opt,name=qagmediarating,enum=zadx.BidRequest_Content_QAGMediaRating" json:"qagmediarating,omitempty"`
	// Indicator of whether or not the content is embeddable (e.g., an
	// embeddable video player), where 0 = no, 1 = yes.
	Embeddable *bool `protobuf:"varint,18,opt,name=embeddable" json:"embeddable,omitempty"`
	// Content language using ISO-639-1-alpha-2.
	Language         *string                   `protobuf:"bytes,19,opt,name=language" json:"language,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Content) Reset()         { *m = BidRequest_Content{} }
func (m *BidRequest_Content) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Content) ProtoMessage()    {}

var extRange_BidRequest_Content = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Content) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Content
}
func (m *BidRequest_Content) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Content) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Content) GetEpisode() int32 {
	if m != nil && m.Episode != nil {
		return *m.Episode
	}
	return 0
}

func (m *BidRequest_Content) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *BidRequest_Content) GetSeries() string {
	if m != nil && m.Series != nil {
		return *m.Series
	}
	return ""
}

func (m *BidRequest_Content) GetSeason() string {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return ""
}

func (m *BidRequest_Content) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *BidRequest_Content) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Content) GetVideoquality() BidRequest_Content_VideoQuality {
	if m != nil && m.Videoquality != nil {
		return *m.Videoquality
	}
	return BidRequest_Content_QUALITY_UNKNOWN
}

func (m *BidRequest_Content) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_Content) GetContentrating() string {
	if m != nil && m.Contentrating != nil {
		return *m.Contentrating
	}
	return ""
}

func (m *BidRequest_Content) GetUserrating() string {
	if m != nil && m.Userrating != nil {
		return *m.Userrating
	}
	return ""
}

func (m *BidRequest_Content) GetContext() BidRequest_Content_ContentContext {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return BidRequest_Content_VIDEO
}

func (m *BidRequest_Content) GetContext_22() string {
	if m != nil && m.Context_22 != nil {
		return *m.Context_22
	}
	return ""
}

func (m *BidRequest_Content) GetLivestream() bool {
	if m != nil && m.Livestream != nil {
		return *m.Livestream
	}
	return false
}

func (m *BidRequest_Content) GetSourcerelationship() bool {
	if m != nil && m.Sourcerelationship != nil {
		return *m.Sourcerelationship
	}
	return false
}

func (m *BidRequest_Content) GetProducer() *BidRequest_Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *BidRequest_Content) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

func (m *BidRequest_Content) GetQagmediarating() BidRequest_Content_QAGMediaRating {
	if m != nil && m.Qagmediarating != nil {
		return *m.Qagmediarating
	}
	return BidRequest_Content_ALL_AUDIENCES
}

func (m *BidRequest_Content) GetEmbeddable() bool {
	if m != nil && m.Embeddable != nil {
		return *m.Embeddable
	}
	return false
}

func (m *BidRequest_Content) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

// OpenRTB 3.2.10: This object defines the producer of the content in which
// the ad will be shown. This is particularly useful when the content is
// syndicated and may be distributed through different publishers and thus
// when the producer and publisher are not necessarily the same entity.
type BidRequest_Producer struct {
	// Content producer or originator ID. Useful if content is syndicated,
	// and may be posted on a site using embed tags.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content producer or originator name (e.g., "Warner Bros").
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the content producer.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the content producer (e.g., "producer.com").
	Domain           *string                   `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Producer) Reset()         { *m = BidRequest_Producer{} }
func (m *BidRequest_Producer) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Producer) ProtoMessage()    {}

var extRange_BidRequest_Producer = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Producer) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Producer
}
func (m *BidRequest_Producer) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Producer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Producer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Producer) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidRequest_Producer) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

// OpenRTB 3.2.11: This object provides information pertaining to the device
// through which the user is interacting. Device information includes its
// hardware, platform, location, and carrier data. The device can refer to a
// mobile handset, a desktop computer, set top box, or other digital device.
type BidRequest_Device struct {
	// Standard "Do Not Track" flag as set in the header by the browser,
	// where 0 = tracking is unrestricted, 1 = do not track.
	// This field is not required, but it's highly recommended.
	// RECOMMENDED by the OpenRTB specification.
	Dnt *bool `protobuf:"varint,1,opt,name=dnt" json:"dnt,omitempty"`
	// Browser user agent string.
	// This field is not required, but it's highly recommended.
	// RECOMMENDED by the OpenRTB specification.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	// IPv4 address closest to device.
	// This field is not required, but it's highly recommended.
	// RECOMMENDED by the OpenRTB specification.
	Ip *string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	// Location of the device assumed to be the user's current location defined
	// by a Geo object (Section 3.2.12).
	// This field is not required, but it's highly recommended.
	// RECOMMENDED by the OpenRTB specification.
	Geo *BidRequest_Geo `protobuf:"bytes,4,opt,name=geo" json:"geo,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	Didsha1 *string `protobuf:"bytes,5,opt,name=didsha1" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	Didmd5 *string `protobuf:"bytes,6,opt,name=didmd5" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	Dpidsha1 *string `protobuf:"bytes,7,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	Dpidmd5 *string `protobuf:"bytes,8,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	// IPv6 address closest to device.
	Ipv6 *string `protobuf:"bytes,9,opt,name=ipv6" json:"ipv6,omitempty"`
	// Carrier or ISP, e.g. "VERIZON", specified using Mobile Network Code (MNC).
	// "WIFI" is often used in mobile to indicate high bandwidth
	// (e.g., video friendly vs. cellular).
	Carrier *string `protobuf:"bytes,10,opt,name=carrier" json:"carrier,omitempty"`
	// Browser language using ISO-639-1-alpha-2.
	Language *string `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	// Device make (e.g., "Apple").
	Make *string `protobuf:"bytes,12,opt,name=make" json:"make,omitempty"`
	// Device model (e.g., "iPhone").
	Model *string `protobuf:"bytes,13,opt,name=model" json:"model,omitempty"`
	// Device operating system (e.g., "iOS").
	Os *string `protobuf:"bytes,14,opt,name=os" json:"os,omitempty"`
	// Device operating system version (e.g., "3.1.2").
	Osv *string `protobuf:"bytes,15,opt,name=osv" json:"osv,omitempty"`
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	Hwv *string `protobuf:"bytes,24,opt,name=hwv" json:"hwv,omitempty"`
	// Physical width of the screen in pixels.
	W *int32 `protobuf:"varint,25,opt,name=w" json:"w,omitempty"`
	// Physical height of the screen in pixels.
	H *int32 `protobuf:"varint,26,opt,name=h" json:"h,omitempty"`
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,27,opt,name=ppi" json:"ppi,omitempty"`
	// The ratio of physical pixels to device independent pixels.
	Pxratio *float64 `protobuf:"fixed64,28,opt,name=pxratio" json:"pxratio,omitempty"`
	// Support for JavaScript, where 0 = no, 1 = yes.
	Js *bool `protobuf:"varint,16,opt,name=js" json:"js,omitempty"`
	// Network connection type.
	Connectiontype *BidRequest_Device_ConnectionType `protobuf:"varint,17,opt,name=connectiontype,enum=zadx.BidRequest_Device_ConnectionType" json:"connectiontype,omitempty"`
	// The general type of device.
	Devicetype *BidRequest_Device_DeviceType `protobuf:"varint,18,opt,name=devicetype,enum=zadx.BidRequest_Device_DeviceType" json:"devicetype,omitempty"`
	// Version of Flash supported by the browser.
	Flashver *string `protobuf:"bytes,19,opt,name=flashver" json:"flashver,omitempty"`
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	Ifa *string `protobuf:"bytes,20,opt,name=ifa" json:"ifa,omitempty"`
	// MAC address of the device; hashed via SHA1.
	Macsha1 *string `protobuf:"bytes,21,opt,name=macsha1" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5.
	Macmd5 *string `protobuf:"bytes,22,opt,name=macmd5" json:"macmd5,omitempty"`
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
	// where 0 = tracking is unrestricted, 1 = tracking must be limited per
	// commercial guidelines.
	// RECOMMENDED by the OpenRTB specification.
	Lmt              *bool                     `protobuf:"varint,23,opt,name=lmt" json:"lmt,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Device) Reset()         { *m = BidRequest_Device{} }
func (m *BidRequest_Device) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Device) ProtoMessage()    {}

var extRange_BidRequest_Device = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Device) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Device
}
func (m *BidRequest_Device) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Device) GetDnt() bool {
	if m != nil && m.Dnt != nil {
		return *m.Dnt
	}
	return false
}

func (m *BidRequest_Device) GetUa() string {
	if m != nil && m.Ua != nil {
		return *m.Ua
	}
	return ""
}

func (m *BidRequest_Device) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_Device) GetDidsha1() string {
	if m != nil && m.Didsha1 != nil {
		return *m.Didsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDidmd5() string {
	if m != nil && m.Didmd5 != nil {
		return *m.Didmd5
	}
	return ""
}

func (m *BidRequest_Device) GetDpidsha1() string {
	if m != nil && m.Dpidsha1 != nil {
		return *m.Dpidsha1
	}
	return ""
}

func (m *BidRequest_Device) GetDpidmd5() string {
	if m != nil && m.Dpidmd5 != nil {
		return *m.Dpidmd5
	}
	return ""
}

func (m *BidRequest_Device) GetIpv6() string {
	if m != nil && m.Ipv6 != nil {
		return *m.Ipv6
	}
	return ""
}

func (m *BidRequest_Device) GetCarrier() string {
	if m != nil && m.Carrier != nil {
		return *m.Carrier
	}
	return ""
}

func (m *BidRequest_Device) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *BidRequest_Device) GetMake() string {
	if m != nil && m.Make != nil {
		return *m.Make
	}
	return ""
}

func (m *BidRequest_Device) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *BidRequest_Device) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *BidRequest_Device) GetOsv() string {
	if m != nil && m.Osv != nil {
		return *m.Osv
	}
	return ""
}

func (m *BidRequest_Device) GetHwv() string {
	if m != nil && m.Hwv != nil {
		return *m.Hwv
	}
	return ""
}

func (m *BidRequest_Device) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidRequest_Device) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *BidRequest_Device) GetPpi() int32 {
	if m != nil && m.Ppi != nil {
		return *m.Ppi
	}
	return 0
}

func (m *BidRequest_Device) GetPxratio() float64 {
	if m != nil && m.Pxratio != nil {
		return *m.Pxratio
	}
	return 0
}

func (m *BidRequest_Device) GetJs() bool {
	if m != nil && m.Js != nil {
		return *m.Js
	}
	return false
}

func (m *BidRequest_Device) GetConnectiontype() BidRequest_Device_ConnectionType {
	if m != nil && m.Connectiontype != nil {
		return *m.Connectiontype
	}
	return BidRequest_Device_CONNECTION_UNKNOWN
}

func (m *BidRequest_Device) GetDevicetype() BidRequest_Device_DeviceType {
	if m != nil && m.Devicetype != nil {
		return *m.Devicetype
	}
	return BidRequest_Device_MOBILE
}

func (m *BidRequest_Device) GetFlashver() string {
	if m != nil && m.Flashver != nil {
		return *m.Flashver
	}
	return ""
}

func (m *BidRequest_Device) GetIfa() string {
	if m != nil && m.Ifa != nil {
		return *m.Ifa
	}
	return ""
}

func (m *BidRequest_Device) GetMacsha1() string {
	if m != nil && m.Macsha1 != nil {
		return *m.Macsha1
	}
	return ""
}

func (m *BidRequest_Device) GetMacmd5() string {
	if m != nil && m.Macmd5 != nil {
		return *m.Macmd5
	}
	return ""
}

func (m *BidRequest_Device) GetLmt() bool {
	if m != nil && m.Lmt != nil {
		return *m.Lmt
	}
	return false
}

// OpenRTB 3.2.12: This object encapsulates various methods for specifying a
// geographic location. When subordinate to a Device object, it indicates the
// location of the device which can also be interpreted as the user's current
// location. When subordinate to a User object, it indicates the location of
// the user's home base (i.e., not necessarily their current location).
//
// The lat/lon attributes should only be passed if they conform to the
// accuracy depicted in the type attribute. For example, the centroid of a
// geographic region such as postal code should not be passed.
type BidRequest_Geo struct {
	// Latitude from -90.0 to +90.0, where negative is south.
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	// Region of a country using FIPS 10-4 notation. While OpenRTB supports
	// this attribute, it has been withdrawn by NIST in 2008.
	Regionfips104 *string `protobuf:"bytes,5,opt,name=regionfips104" json:"regionfips104,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	// See Appendix A for a link to the codes.
	// (http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// See Appendix A for a link to the codes.
	// (http://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Source of location data; recommended when passing lat/lon.
	Type *BidRequest_Geo_LocationType `protobuf:"varint,9,opt,name=type,enum=zadx.BidRequest_Geo_LocationType" json:"type,omitempty"`
	// Local time as the number +/- of minutes from UTC.
	Utcoffset        *int32                    `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Geo) Reset()         { *m = BidRequest_Geo{} }
func (m *BidRequest_Geo) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Geo) ProtoMessage()    {}

var extRange_BidRequest_Geo = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Geo) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Geo
}
func (m *BidRequest_Geo) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Geo) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *BidRequest_Geo) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *BidRequest_Geo) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *BidRequest_Geo) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *BidRequest_Geo) GetRegionfips104() string {
	if m != nil && m.Regionfips104 != nil {
		return *m.Regionfips104
	}
	return ""
}

func (m *BidRequest_Geo) GetMetro() string {
	if m != nil && m.Metro != nil {
		return *m.Metro
	}
	return ""
}

func (m *BidRequest_Geo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *BidRequest_Geo) GetZip() string {
	if m != nil && m.Zip != nil {
		return *m.Zip
	}
	return ""
}

func (m *BidRequest_Geo) GetType() BidRequest_Geo_LocationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return BidRequest_Geo_GPS_LOCATION
}

func (m *BidRequest_Geo) GetUtcoffset() int32 {
	if m != nil && m.Utcoffset != nil {
		return *m.Utcoffset
	}
	return 0
}

// OpenRTB 3.2.13: This object contains information known or derived about
// the human user of the device (i.e., the audience for advertising).
// The user id is an exchange artifact and may be subject to rotation or other
// privacy policies. However, this user ID must be stable long enough to serve
// reasonably as the basis for frequency capping and retargeting.
type BidRequest_User struct {
	// Exchange-specific ID for the user. At least one of id or buyerid
	// is recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by the exchange for the buyer.
	// At least one of buyerid or id is recommended.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	// Year of birth as a 4-digit integer.
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	// Gender as "M" male, "F" female, "O" Other. (Null indicates unknown)
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	// Comma separated list of keywords, interests, or intent.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	// Optional feature to pass bidder data set in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata *string `protobuf:"bytes,6,opt,name=customdata" json:"customdata,omitempty"`
	// Location of the user's home base defined by a Geo object
	// (Section 3.2.12). This is not necessarily their current location.
	Geo *BidRequest_Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	// Additional user data. Each Data object (Section 3.2.14) represents a
	// different data source.
	Data             []*BidRequest_Data        `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_User) Reset()         { *m = BidRequest_User{} }
func (m *BidRequest_User) String() string { return proto.CompactTextString(m) }
func (*BidRequest_User) ProtoMessage()    {}

var extRange_BidRequest_User = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_User) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_User
}
func (m *BidRequest_User) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_User) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_User) GetBuyeruid() string {
	if m != nil && m.Buyeruid != nil {
		return *m.Buyeruid
	}
	return ""
}

func (m *BidRequest_User) GetYob() int32 {
	if m != nil && m.Yob != nil {
		return *m.Yob
	}
	return 0
}

func (m *BidRequest_User) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *BidRequest_User) GetKeywords() string {
	if m != nil && m.Keywords != nil {
		return *m.Keywords
	}
	return ""
}

func (m *BidRequest_User) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidRequest_User) GetGeo() *BidRequest_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *BidRequest_User) GetData() []*BidRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// OpenRTB 3.2.14: The data and segment objects together allow additional data
// about the user to be specified. This data may be from multiple sources
// whether from the exchange itself or third party providers as specified by
// the id field. A bid request can mix data objects from multiple providers.
// The specific data providers in use should be published by the exchange
// a priori to its bidders.
type BidRequest_Data struct {
	// Exchange-specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Exchange-specific name for the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of Segment (Section 3.2.15) objects that contain the actual
	// data values.
	Segment          []*BidRequest_Data_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
	XXX_extensions   map[int32]proto.Extension  `json:"-"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *BidRequest_Data) Reset()         { *m = BidRequest_Data{} }
func (m *BidRequest_Data) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Data) ProtoMessage()    {}

var extRange_BidRequest_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Data
}
func (m *BidRequest_Data) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Data) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data) GetSegment() []*BidRequest_Data_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

// OpenRTB 3.2.15: Segment objects are essentially key-value pairs that
// convey specific units of data about the user. The parent Data object
// is a collection of such values from a given data provider.
// The specific segment names and value options must be published by the
// exchange a priori to its bidders.
type BidRequest_Data_Segment struct {
	// ID of the data segment specific to the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name of the data segment specific to the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// String representation of the data segment value.
	Value            *string                   `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Data_Segment) Reset()         { *m = BidRequest_Data_Segment{} }
func (m *BidRequest_Data_Segment) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Data_Segment) ProtoMessage()    {}

var extRange_BidRequest_Data_Segment = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Data_Segment) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Data_Segment
}
func (m *BidRequest_Data_Segment) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Data_Segment) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BidRequest_Data_Segment) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// OpenRTB 3.2.16: This object contains any legal, governmental, or industry
// regulations that apply to the request. The coppa flag signals whether
// or not the request falls under the United States Federal Trade Commission's
// regulations for the United States Children's Online Privacy Protection Act
// ("COPPA"). Refer to Section 7.1 for more information.
type BidRequest_Regs struct {
	// Flag indicating if this request is subject to the COPPA regulations
	// established by the USA FTC, where 0 = no, 1 = yes.
	Coppa            *bool                     `protobuf:"varint,1,opt,name=coppa" json:"coppa,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidRequest_Regs) Reset()         { *m = BidRequest_Regs{} }
func (m *BidRequest_Regs) String() string { return proto.CompactTextString(m) }
func (*BidRequest_Regs) ProtoMessage()    {}

var extRange_BidRequest_Regs = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidRequest_Regs) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidRequest_Regs
}
func (m *BidRequest_Regs) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidRequest_Regs) GetCoppa() bool {
	if m != nil && m.Coppa != nil {
		return *m.Coppa
	}
	return false
}

// OpenRTB 4.2.1: This object is the top-level bid response object (i.e., the
// unnamed outer JSON object). The id attribute is a reflection of the bid
// request ID for logging purposes. Similarly, bidid is an optional response
// tracking ID for bidders. If specified, it can be included in the subsequent
// win notice call if the bidder wins. At least one seatbid object is required,
// which contains at least one bid for an impression. Other attributes are
// optional. To express a "no-bid", the options are to return an empty response
// with HTTP 204. Alternately if the bidder wishes to convey to the exchange a
// reason for not bidding, just a BidResponse object is returned with a
// reason code in the nbr attribute.
type BidResponse struct {
	// ID of the bid request to which this is a response.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of seatbid objects; 1+ required if a bid is to be made.
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	Bidid *string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	// Bid currency using ISO-4217 alpha codes.
	Cur *string `protobuf:"bytes,4,opt,name=cur,def=CNY" json:"cur,omitempty"`
	// Optional feature to allow a bidder to set data in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata *string `protobuf:"bytes,5,opt,name=customdata" json:"customdata,omitempty"`
	// Reason for not bidding.
	Nbr              *BidResponse_NoBidReason  `protobuf:"varint,6,opt,name=nbr,enum=zadx.BidResponse_NoBidReason" json:"nbr,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidResponse) Reset()         { *m = BidResponse{} }
func (m *BidResponse) String() string { return proto.CompactTextString(m) }
func (*BidResponse) ProtoMessage()    {}

var extRange_BidResponse = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse
}
func (m *BidResponse) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_BidResponse_Cur string = "CNY"

func (m *BidResponse) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if m != nil {
		return m.Seatbid
	}
	return nil
}

func (m *BidResponse) GetBidid() string {
	if m != nil && m.Bidid != nil {
		return *m.Bidid
	}
	return ""
}

func (m *BidResponse) GetCur() string {
	if m != nil && m.Cur != nil {
		return *m.Cur
	}
	return Default_BidResponse_Cur
}

func (m *BidResponse) GetCustomdata() string {
	if m != nil && m.Customdata != nil {
		return *m.Customdata
	}
	return ""
}

func (m *BidResponse) GetNbr() BidResponse_NoBidReason {
	if m != nil && m.Nbr != nil {
		return *m.Nbr
	}
	return BidResponse_UNKNOWN_ERROR
}

// OpenRTB 4.2.2: A bid response can contain multiple SeatBid objects, each on
// behalf of a different bidder seat and each containing one or more
// individual bids. If multiple impressions are presented in the request, the
// group attribute can be used to specify if a seat is willing to accept any
// impressions that it can win (default) or if it is only interested in
// winning any if it can win them all as a group.
type BidResponse_SeatBid struct {
	// Array of 1+ Bid objects (Section 4.2.3) each related to an impression.
	// Multiple bids can relate to the same impression.
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	// ID of the bidder seat on whose behalf this bid is made.
	Seat *string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
	// 0 = impressions can be won individually; 1 = impressions must be won or
	// lost as a group.
	Group            *bool                     `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidResponse_SeatBid) Reset()         { *m = BidResponse_SeatBid{} }
func (m *BidResponse_SeatBid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid) ProtoMessage()    {}

var extRange_BidResponse_SeatBid = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse_SeatBid) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse_SeatBid
}
func (m *BidResponse_SeatBid) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *BidResponse_SeatBid) GetSeat() string {
	if m != nil && m.Seat != nil {
		return *m.Seat
	}
	return ""
}

func (m *BidResponse_SeatBid) GetGroup() bool {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return false
}

// OpenRTB 4.2.3: A SeatBid object contains one or more Bid objects,
// each of which relates to a specific impression in the bid request
// via the impid attribute and constitutes an offer to buy that impression
// for a given price.
type BidResponse_SeatBid_Bid struct {
	// Bidder generated bid ID to assist with logging/tracking.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// ID of the Imp object in the related bid request.
	// REQUIRED by the OpenRTB specification.
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	// Bid price expressed as CPM although the actual transaction is for a
	// unit impression only. Note that while the type indicates float, integer
	// math is highly recommended when handling currencies
	// (e.g., BigDecimal in Java).
	// REQUIRED by the OpenRTB specification.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins.
	Adid *string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	// Win notice URL called by the exchange if the bid wins; optional means
	// of serving ad markup.
	Nurl *string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	// Types that are valid to be assigned to AdmOneof:
	//	*BidResponse_SeatBid_Bid_Adm
	//	*BidResponse_SeatBid_Bid_AdmNative
	AdmOneof isBidResponse_SeatBid_Bid_AdmOneof `protobuf_oneof:"adm_oneof"`
	// Advertiser domain for block list checking (e.g., "ford.com"). This can
	// be an array of for the case of rotating creatives. Exchanges can
	// mandate that only one domain is allowed.
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// Bundle or package name (e.g., com.foo.mygame) of the app being
	// advertised, if applicable; intended to be a unique ID across exchanges.
	Bundle *string `protobuf:"bytes,14,opt,name=bundle" json:"bundle,omitempty"`
	// URL without cache-busting to an image that is representative of the
	// content of the campaign for ad quality/safety checking.
	Iurl *string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	// Campaign ID to assist with ad quality checking; the collection of
	// creatives for which iurl should be representative.
	Cid *string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	// Creative ID to assist with ad quality checking.
	Crid *string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// IAB content categories of the creative. See enum ContentCategory.
	Cat []string `protobuf:"bytes,15,rep,name=cat" json:"cat,omitempty"`
	// Set of attributes describing the creative.
	Attr []CreativeAttribute `protobuf:"varint,11,rep,packed,name=attr,enum=zadx.CreativeAttribute" json:"attr,omitempty"`
	// Reference to the deal.id from the bid request if this bid pertains to a
	// private marketplace direct deal.
	Dealid *string `protobuf:"bytes,13,opt,name=dealid" json:"dealid,omitempty"`
	// Width of the ad in pixels.
	W *int32 `protobuf:"varint,16,opt,name=w" json:"w,omitempty"`
	// Height of the ad in pixels.
	H                *int32                    `protobuf:"varint,17,opt,name=h" json:"h,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *BidResponse_SeatBid_Bid) Reset()         { *m = BidResponse_SeatBid_Bid{} }
func (m *BidResponse_SeatBid_Bid) String() string { return proto.CompactTextString(m) }
func (*BidResponse_SeatBid_Bid) ProtoMessage()    {}

var extRange_BidResponse_SeatBid_Bid = []proto.ExtensionRange{
	{100, 9999},
}

func (*BidResponse_SeatBid_Bid) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_BidResponse_SeatBid_Bid
}
func (m *BidResponse_SeatBid_Bid) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

type isBidResponse_SeatBid_Bid_AdmOneof interface{ isBidResponse_SeatBid_Bid_AdmOneof() }

type BidResponse_SeatBid_Bid_Adm struct {
	Adm string `protobuf:"bytes,6,opt,name=adm,oneof"`
}
type BidResponse_SeatBid_Bid_AdmNative struct {
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,oneof"`
}

func (*BidResponse_SeatBid_Bid_Adm) isBidResponse_SeatBid_Bid_AdmOneof()       {}
func (*BidResponse_SeatBid_Bid_AdmNative) isBidResponse_SeatBid_Bid_AdmOneof() {}

func (m *BidResponse_SeatBid_Bid) GetAdmOneof() isBidResponse_SeatBid_Bid_AdmOneof {
	if m != nil {
		return m.AdmOneof
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetImpid() string {
	if m != nil && m.Impid != nil {
		return *m.Impid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetAdid() string {
	if m != nil && m.Adid != nil {
		return *m.Adid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetNurl() string {
	if m != nil && m.Nurl != nil {
		return *m.Nurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdm() string {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_Adm); ok {
		return x.Adm
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if x, ok := m.GetAdmOneof().(*BidResponse_SeatBid_Bid_AdmNative); ok {
		return x.AdmNative
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if m != nil {
		return m.Adomain
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetBundle() string {
	if m != nil && m.Bundle != nil {
		return *m.Bundle
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetIurl() string {
	if m != nil && m.Iurl != nil {
		return *m.Iurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCid() string {
	if m != nil && m.Cid != nil {
		return *m.Cid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCrid() string {
	if m != nil && m.Crid != nil {
		return *m.Crid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetCat() []string {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *BidResponse_SeatBid_Bid) GetDealid() string {
	if m != nil && m.Dealid != nil {
		return *m.Dealid
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *BidResponse_SeatBid_Bid) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BidResponse_SeatBid_Bid) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _BidResponse_SeatBid_Bid_OneofMarshaler, _BidResponse_SeatBid_Bid_OneofUnmarshaler, []interface{}{
		(*BidResponse_SeatBid_Bid_Adm)(nil),
		(*BidResponse_SeatBid_Bid_AdmNative)(nil),
	}
}

func _BidResponse_SeatBid_Bid_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BidResponse_SeatBid_Bid)
	// adm_oneof
	switch x := m.AdmOneof.(type) {
	case *BidResponse_SeatBid_Bid_Adm:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Adm)
	case *BidResponse_SeatBid_Bid_AdmNative:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdmNative); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BidResponse_SeatBid_Bid.AdmOneof has unexpected type %T", x)
	}
	return nil
}

func _BidResponse_SeatBid_Bid_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BidResponse_SeatBid_Bid)
	switch tag {
	case 6: // adm_oneof.adm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AdmOneof = &BidResponse_SeatBid_Bid_Adm{x}
		return true, err
	case 50: // adm_oneof.adm_native
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse)
		err := b.DecodeMessage(msg)
		m.AdmOneof = &BidResponse_SeatBid_Bid_AdmNative{msg}
		return true, err
	default:
		return false, nil
	}
}

// OpenRTB Native 4.1: The Native Object defines the native advertising
// opportunity available for bid via this bid request. It must be included
// directly in the impression object if the impression offered for auction
// is a native ad format.
type NativeRequest struct {
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// The Layout ID of the native ad unit.
	// This field is not required, but it's highly recommended.
	// RECOMMENDED by the OpenRTB Native specification.
	Layout *NativeRequest_LayoutId `protobuf:"varint,2,opt,name=layout,enum=zadx.NativeRequest_LayoutId" json:"layout,omitempty"`
	// The Ad unit ID of the native ad unit. This corresponds to one of
	// IAB Core-6 native ad units.
	// RECOMMENDED by the OpenRTB Native specification.
	Adunit *NativeRequest_AdUnitId `protobuf:"varint,3,opt,name=adunit,enum=zadx.NativeRequest_AdUnitId" json:"adunit,omitempty"`
	// The number of identical placements in this Layout.
	Plcmtcnt *int32 `protobuf:"varint,4,opt,name=plcmtcnt,def=1" json:"plcmtcnt,omitempty"`
	// 0 for the first ad, 1 for the second ad, and so on.
	// This is not the sequence number of the content in the stream.
	Seq *int32 `protobuf:"varint,5,opt,name=seq,def=0" json:"seq,omitempty"`
	// Any bid must comply with the array of elements expressed by the Exchange.
	// REQUIRED by the OpenRTB Native specification: at least 1 element.
	Assets           []*NativeRequest_Asset    `protobuf:"bytes,6,rep,name=assets" json:"assets,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeRequest) Reset()         { *m = NativeRequest{} }
func (m *NativeRequest) String() string { return proto.CompactTextString(m) }
func (*NativeRequest) ProtoMessage()    {}

var extRange_NativeRequest = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest
}
func (m *NativeRequest) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_NativeRequest_Plcmtcnt int32 = 1
const Default_NativeRequest_Seq int32 = 0

func (m *NativeRequest) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeRequest) GetLayout() NativeRequest_LayoutId {
	if m != nil && m.Layout != nil {
		return *m.Layout
	}
	return NativeRequest_CONTENT_WALL
}

func (m *NativeRequest) GetAdunit() NativeRequest_AdUnitId {
	if m != nil && m.Adunit != nil {
		return *m.Adunit
	}
	return NativeRequest_PAID_SEARCH_UNIT
}

func (m *NativeRequest) GetPlcmtcnt() int32 {
	if m != nil && m.Plcmtcnt != nil {
		return *m.Plcmtcnt
	}
	return Default_NativeRequest_Plcmtcnt
}

func (m *NativeRequest) GetSeq() int32 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return Default_NativeRequest_Seq
}

func (m *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// OpenRTB Native 4.2: The main container object for each asset requested or
// supported by Exchange on behalf of the rendering client.
// Any object that is required is to be flagged as such. Only one of the
// {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the
// Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	// REQUIRED by the OpenRTB Native specification.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to true if asset is required
	// (exchange will not accept a bid without it).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeRequest_Asset_Title_
	//	*NativeRequest_Asset_Img
	//	*NativeRequest_Asset_Video
	//	*NativeRequest_Asset_Data_
	AssetOneof       isNativeRequest_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	XXX_extensions   map[int32]proto.Extension        `json:"-"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *NativeRequest_Asset) Reset()         { *m = NativeRequest_Asset{} }
func (m *NativeRequest_Asset) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset) ProtoMessage()    {}

var extRange_NativeRequest_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset
}
func (m *NativeRequest_Asset) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_NativeRequest_Asset_Required bool = false

type isNativeRequest_Asset_AssetOneof interface{ isNativeRequest_Asset_AssetOneof() }

type NativeRequest_Asset_Title_ struct {
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}
type NativeRequest_Asset_Img struct {
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}
type NativeRequest_Asset_Video struct {
	Video *BidRequest_Imp_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}
type NativeRequest_Asset_Data_ struct {
	Data *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeRequest_Asset_Title_) isNativeRequest_Asset_AssetOneof() {}
func (*NativeRequest_Asset_Img) isNativeRequest_Asset_AssetOneof()    {}
func (*NativeRequest_Asset_Video) isNativeRequest_Asset_AssetOneof()  {}
func (*NativeRequest_Asset_Data_) isNativeRequest_Asset_AssetOneof()  {}

func (m *NativeRequest_Asset) GetAssetOneof() isNativeRequest_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeRequest_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeRequest_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeRequest_Asset_Required
}

func (m *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeRequest_Asset) GetVideo() *BidRequest_Imp_Video {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Video); ok {
		return x.Video
	}
	return nil
}

func (m *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeRequest_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeRequest_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _NativeRequest_Asset_OneofMarshaler, _NativeRequest_Asset_OneofUnmarshaler, []interface{}{
		(*NativeRequest_Asset_Title_)(nil),
		(*NativeRequest_Asset_Img)(nil),
		(*NativeRequest_Asset_Video)(nil),
		(*NativeRequest_Asset_Data_)(nil),
	}
}

func _NativeRequest_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeRequest_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeRequest_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeRequest_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeRequest_Asset_Video:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeRequest_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeRequest_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeRequest_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeRequest_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BidRequest_Imp_Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Video{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeRequest_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeRequest_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

// OpenRTB Native 4.3: The Title object is to be used for title element
// of the Native ad.
type NativeRequest_Asset_Title struct {
	// Maximum length of the text in the title element.
	// REQUIRED by the OpenRTB Native specification.
	Len              *int32                    `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeRequest_Asset_Title) Reset()         { *m = NativeRequest_Asset_Title{} }
func (m *NativeRequest_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Title) ProtoMessage()    {}

var extRange_NativeRequest_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Title
}
func (m *NativeRequest_Asset_Title) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeRequest_Asset_Title) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// OpenRTB Native 4.4: The Image object to be used for all image elements
// of the Native ad such as Icons, Main Image, etc.
type NativeRequest_Asset_Image struct {
	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	Type *NativeRequest_Asset_Image_ImageAssetType `protobuf:"varint,1,opt,name=type,enum=zadx.NativeRequest_Asset_Image_ImageAssetType" json:"type,omitempty"`
	// Width of the image in pixels.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	// The minimum requested width of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either w or wmin
	// should be transmitted. If only w is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Wmin *int32 `protobuf:"varint,4,opt,name=wmin" json:"wmin,omitempty"`
	// The minimum requested height of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either h or hmin
	// should be transmitted. If only h is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Hmin *int32 `protobuf:"varint,5,opt,name=hmin" json:"hmin,omitempty"`
	// Whitelist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg" and "image/gif". Each implementing
	// Exchange should have their own list of supported types in the
	// integration docs. See Wikipedia's MIME page for more information and
	// links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes            []string                  `protobuf:"bytes,6,rep,name=mimes" json:"mimes,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeRequest_Asset_Image) Reset()         { *m = NativeRequest_Asset_Image{} }
func (m *NativeRequest_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Image) ProtoMessage()    {}

var extRange_NativeRequest_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Image
}
func (m *NativeRequest_Asset_Image) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeRequest_Asset_Image) GetType() NativeRequest_Asset_Image_ImageAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NativeRequest_Asset_Image_ICON
}

func (m *NativeRequest_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetWmin() int32 {
	if m != nil && m.Wmin != nil {
		return *m.Wmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetHmin() int32 {
	if m != nil && m.Hmin != nil {
		return *m.Hmin
	}
	return 0
}

func (m *NativeRequest_Asset_Image) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

// OpenRTB Native 4.6: The Data Object is to be used for all non-core
// elements of the native unit such as Ratings, Review Count, Stars,
// Download count, descriptions etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeRequest_Asset_Data struct {
	// Type ID of the element supported by the publisher. The publisher can
	// display this information in an appropriate format.
	// REQUIRED by the OpenRTB Native specification.
	Type *NativeRequest_Asset_Data_DataAssetType `protobuf:"varint,1,req,name=type,enum=zadx.NativeRequest_Asset_Data_DataAssetType" json:"type,omitempty"`
	// Maximum length of the text in the element's response.
	Len              *int32                    `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeRequest_Asset_Data) Reset()         { *m = NativeRequest_Asset_Data{} }
func (m *NativeRequest_Asset_Data) String() string { return proto.CompactTextString(m) }
func (*NativeRequest_Asset_Data) ProtoMessage()    {}

var extRange_NativeRequest_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeRequest_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeRequest_Asset_Data
}
func (m *NativeRequest_Asset_Data) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeRequest_Asset_Data) GetType() NativeRequest_Asset_Data_DataAssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NativeRequest_Asset_Data_SPONSORED
}

func (m *NativeRequest_Asset_Data) GetLen() int32 {
	if m != nil && m.Len != nil {
		return *m.Len
	}
	return 0
}

// OpenRTB Native 5.2: The native response object is the top level JSON object
// which identifies an native response.
type NativeResponse struct {
	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// List of native ad's assets.
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	// Destination Link.
	// REQUIRED by the OpenRTB Native specification.
	Link *NativeResponse_Link `protobuf:"bytes,3,req,name=link" json:"link,omitempty"`
	// Array of impression tracking URLs, expected to return a 1x1 image or
	// 204 response - typically only passed when using 3rd party trackers.
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers" json:"imptrackers,omitempty"`
	// Optional javascript impression tracker. Contains <script> tags to be
	// executed at impression time where it can be supported.
	Jstracker        *string                   `protobuf:"bytes,5,opt,name=jstracker" json:"jstracker,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse) Reset()         { *m = NativeResponse{} }
func (m *NativeResponse) String() string { return proto.CompactTextString(m) }
func (*NativeResponse) ProtoMessage()    {}

var extRange_NativeResponse = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse
}
func (m *NativeResponse) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse) GetVer() string {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return ""
}

func (m *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NativeResponse) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *NativeResponse) GetImptrackers() []string {
	if m != nil {
		return m.Imptrackers
	}
	return nil
}

func (m *NativeResponse) GetJstracker() string {
	if m != nil && m.Jstracker != nil {
		return *m.Jstracker
	}
	return ""
}

// OpenRTB Native 5.8: Used for "call to action" assets, or other links from
// the Native ad. This Object should be associated to its peer object in the
// parent Asset Object. When that peer object is activated (clicked)
// the action should take the user to the location of the link.
type NativeResponse_Link struct {
	// Landing URL of the clickable link.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// List of third-party tracker URLs to be fired on click of the URL.
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
	// Fallback URL for deeplink. To be used if the URL given in url is not
	// supported by the device.
	Fallback         *string                   `protobuf:"bytes,3,opt,name=fallback" json:"fallback,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Link) Reset()         { *m = NativeResponse_Link{} }
func (m *NativeResponse_Link) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Link) ProtoMessage()    {}

var extRange_NativeResponse_Link = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Link) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Link
}
func (m *NativeResponse_Link) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse_Link) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Link) GetClicktrackers() []string {
	if m != nil {
		return m.Clicktrackers
	}
	return nil
}

func (m *NativeResponse_Link) GetFallback() string {
	if m != nil && m.Fallback != nil {
		return *m.Fallback
	}
	return ""
}

// OpenRTB Native 5.3: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange
// on behalf of the rendering client. Any object that is required is to be
// flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be
// unique within the Asset array so that the response can be aligned.
type NativeResponse_Asset struct {
	// Unique asset ID, assigned by exchange, must match one of the asset IDs
	// in request.
	// REQUIRED by the OpenRTB Native specification.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// Types that are valid to be assigned to AssetOneof:
	//	*NativeResponse_Asset_Title_
	//	*NativeResponse_Asset_Img
	//	*NativeResponse_Asset_Video_
	//	*NativeResponse_Asset_Data_
	AssetOneof isNativeResponse_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	// Link object for call to actions. This link is to associated to the other
	// populated field within the object.
	Link             *NativeResponse_Link      `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Asset) Reset()         { *m = NativeResponse_Asset{} }
func (m *NativeResponse_Asset) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset) ProtoMessage()    {}

var extRange_NativeResponse_Asset = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset
}
func (m *NativeResponse_Asset) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_NativeResponse_Asset_Required bool = false

type isNativeResponse_Asset_AssetOneof interface{ isNativeResponse_Asset_AssetOneof() }

type NativeResponse_Asset_Title_ struct {
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}
type NativeResponse_Asset_Img struct {
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}
type NativeResponse_Asset_Video_ struct {
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}
type NativeResponse_Asset_Data_ struct {
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeResponse_Asset_Title_) isNativeResponse_Asset_AssetOneof() {}
func (*NativeResponse_Asset_Img) isNativeResponse_Asset_AssetOneof()    {}
func (*NativeResponse_Asset_Video_) isNativeResponse_Asset_AssetOneof() {}
func (*NativeResponse_Asset_Data_) isNativeResponse_Asset_AssetOneof()  {}

func (m *NativeResponse_Asset) GetAssetOneof() isNativeResponse_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (m *NativeResponse_Asset) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *NativeResponse_Asset) GetRequired() bool {
	if m != nil && m.Required != nil {
		return *m.Required
	}
	return Default_NativeResponse_Asset_Required
}

func (m *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (m *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (m *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Video_); ok {
		return x.Video
	}
	return nil
}

func (m *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if x, ok := m.GetAssetOneof().(*NativeResponse_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

func (m *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NativeResponse_Asset) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _NativeResponse_Asset_OneofMarshaler, _NativeResponse_Asset_OneofUnmarshaler, []interface{}{
		(*NativeResponse_Asset_Title_)(nil),
		(*NativeResponse_Asset_Img)(nil),
		(*NativeResponse_Asset_Video_)(nil),
		(*NativeResponse_Asset_Data_)(nil),
	}
}

func _NativeResponse_Asset_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NativeResponse_Asset)
	// asset_oneof
	switch x := m.AssetOneof.(type) {
	case *NativeResponse_Asset_Title_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Title); err != nil {
			return err
		}
	case *NativeResponse_Asset_Img:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Img); err != nil {
			return err
		}
	case *NativeResponse_Asset_Video_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *NativeResponse_Asset_Data_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NativeResponse_Asset.AssetOneof has unexpected type %T", x)
	}
	return nil
}

func _NativeResponse_Asset_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NativeResponse_Asset)
	switch tag {
	case 3: // asset_oneof.title
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Title)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Title_{msg}
		return true, err
	case 4: // asset_oneof.img
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Image)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Img{msg}
		return true, err
	case 5: // asset_oneof.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Video)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Video_{msg}
		return true, err
	case 6: // asset_oneof.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeResponse_Asset_Data)
		err := b.DecodeMessage(msg)
		m.AssetOneof = &NativeResponse_Asset_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

// OpenRTB Native 5.4: Corresponds to the Title Object in the request,
// with the value filled in.
type NativeResponse_Asset_Title struct {
	// The text associated with the text element.
	// REQUIRED by the OpenRTB Native specification.
	Text             *string                   `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Asset_Title) Reset()         { *m = NativeResponse_Asset_Title{} }
func (m *NativeResponse_Asset_Title) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Title) ProtoMessage()    {}

var extRange_NativeResponse_Asset_Title = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Title) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Title
}
func (m *NativeResponse_Asset_Title) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse_Asset_Title) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// OpenRTB Native 5.5: Corresponds to the Image Object in the request.
// The Image object to be used for all image elements of the Native ad
// such as Icons, Main Image, etc.
type NativeResponse_Asset_Image struct {
	// URL of the image asset.
	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Width of the image in pixels.
	// RECOMMENDED by the OpenRTB Native specification.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	// RECOMMENDED by the OpenRTB Native specification.
	H                *int32                    `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Asset_Image) Reset()         { *m = NativeResponse_Asset_Image{} }
func (m *NativeResponse_Asset_Image) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Image) ProtoMessage()    {}

var extRange_NativeResponse_Asset_Image = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Image) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Image
}
func (m *NativeResponse_Asset_Image) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse_Asset_Image) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *NativeResponse_Asset_Image) GetW() int32 {
	if m != nil && m.W != nil {
		return *m.W
	}
	return 0
}

func (m *NativeResponse_Asset_Image) GetH() int32 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

// OpenRTB Native 5.6: Corresponds to the Data Object in the request, with
// the value filled in. The Data Object is to be used for all miscellaneous
// elements of the native unit such as Ratings, Review Count, Stars,
// Downloads, Price count etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	// The optional formatted string name of the data type to be displayed.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// The formatted string of data to be displayed. Can contain a formatted
	// value such as "5 stars" or "$10" or "3.4 stars out of 5".
	// REQUIRED by the OpenRTB Native specification.
	Value            *string                   `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Asset_Data) Reset()         { *m = NativeResponse_Asset_Data{} }
func (m *NativeResponse_Asset_Data) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Data) ProtoMessage()    {}

var extRange_NativeResponse_Asset_Data = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Data) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Data
}
func (m *NativeResponse_Asset_Data) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse_Asset_Data) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *NativeResponse_Asset_Data) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// OpenRTB Native 5.7: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	// VAST xml.
	// REQUIRED by the OpenRTB Native specification: at least 1 element.
	Vasttag          []string                  `protobuf:"bytes,1,rep,name=vasttag" json:"vasttag,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *NativeResponse_Asset_Video) Reset()         { *m = NativeResponse_Asset_Video{} }
func (m *NativeResponse_Asset_Video) String() string { return proto.CompactTextString(m) }
func (*NativeResponse_Asset_Video) ProtoMessage()    {}

var extRange_NativeResponse_Asset_Video = []proto.ExtensionRange{
	{100, 9999},
}

func (*NativeResponse_Asset_Video) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_NativeResponse_Asset_Video
}
func (m *NativeResponse_Asset_Video) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *NativeResponse_Asset_Video) GetVasttag() []string {
	if m != nil {
		return m.Vasttag
	}
	return nil
}

func init() {
	proto.RegisterEnum("zadx.ContentCategory", ContentCategory_name, ContentCategory_value)
	proto.RegisterEnum("zadx.CreativeAttribute", CreativeAttribute_name, CreativeAttribute_value)
	proto.RegisterEnum("zadx.BidRequest_AuctionType", BidRequest_AuctionType_name, BidRequest_AuctionType_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_AdPosition", BidRequest_Imp_AdPosition_name, BidRequest_Imp_AdPosition_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_APIFramework", BidRequest_Imp_APIFramework_name, BidRequest_Imp_APIFramework_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Banner_BannerAdType", BidRequest_Imp_Banner_BannerAdType_name, BidRequest_Imp_Banner_BannerAdType_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Banner_ExpandableDirection", BidRequest_Imp_Banner_ExpandableDirection_name, BidRequest_Imp_Banner_ExpandableDirection_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_VideoLinearity", BidRequest_Imp_Video_VideoLinearity_name, BidRequest_Imp_Video_VideoLinearity_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_VideoBidResponseProtocol", BidRequest_Imp_Video_VideoBidResponseProtocol_name, BidRequest_Imp_Video_VideoBidResponseProtocol_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_VideoPlaybackMethod", BidRequest_Imp_Video_VideoPlaybackMethod_name, BidRequest_Imp_Video_VideoPlaybackMethod_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_VideoStartDelay", BidRequest_Imp_Video_VideoStartDelay_name, BidRequest_Imp_Video_VideoStartDelay_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_VASTCompanionType", BidRequest_Imp_Video_VASTCompanionType_name, BidRequest_Imp_Video_VASTCompanionType_value)
	proto.RegisterEnum("zadx.BidRequest_Imp_Video_ContentDeliveryMethod", BidRequest_Imp_Video_ContentDeliveryMethod_name, BidRequest_Imp_Video_ContentDeliveryMethod_value)
	proto.RegisterEnum("zadx.BidRequest_Content_VideoQuality", BidRequest_Content_VideoQuality_name, BidRequest_Content_VideoQuality_value)
	proto.RegisterEnum("zadx.BidRequest_Content_ContentContext", BidRequest_Content_ContentContext_name, BidRequest_Content_ContentContext_value)
	proto.RegisterEnum("zadx.BidRequest_Content_QAGMediaRating", BidRequest_Content_QAGMediaRating_name, BidRequest_Content_QAGMediaRating_value)
	proto.RegisterEnum("zadx.BidRequest_Device_DeviceType", BidRequest_Device_DeviceType_name, BidRequest_Device_DeviceType_value)
	proto.RegisterEnum("zadx.BidRequest_Device_ConnectionType", BidRequest_Device_ConnectionType_name, BidRequest_Device_ConnectionType_value)
	proto.RegisterEnum("zadx.BidRequest_Geo_LocationType", BidRequest_Geo_LocationType_name, BidRequest_Geo_LocationType_value)
	proto.RegisterEnum("zadx.BidRequest_User_Gender", BidRequest_User_Gender_name, BidRequest_User_Gender_value)
	proto.RegisterEnum("zadx.BidResponse_NoBidReason", BidResponse_NoBidReason_name, BidResponse_NoBidReason_value)
	proto.RegisterEnum("zadx.NativeRequest_LayoutId", NativeRequest_LayoutId_name, NativeRequest_LayoutId_value)
	proto.RegisterEnum("zadx.NativeRequest_AdUnitId", NativeRequest_AdUnitId_name, NativeRequest_AdUnitId_value)
	proto.RegisterEnum("zadx.NativeRequest_Asset_Image_ImageAssetType", NativeRequest_Asset_Image_ImageAssetType_name, NativeRequest_Asset_Image_ImageAssetType_value)
	proto.RegisterEnum("zadx.NativeRequest_Asset_Data_DataAssetType", NativeRequest_Asset_Data_DataAssetType_name, NativeRequest_Asset_Data_DataAssetType_value)
}
